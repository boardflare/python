[
  {
    "name": "ai_ask",
    "description": "Uses AI to generate responses based on prompts and optional data ranges.",
    "code": "import requests\nimport json\n\ndef ai_ask(prompt, data=None, temperature=0.5, max_tokens=250, model='mistral-small-2501'):\n    \"\"\"\n    Uses AI to generate responses based on prompts and optional data ranges.\n\n    Args:\n        prompt (str): The question, task, or analysis to perform\n        data (list, optional): 2D list containing data from Excel range to analyze\n        temperature (float, optional): Controls response creativity (0-2). Default is 0.5\n        max_tokens (int, optional): Maximum tokens for response generation\n        model (str, optional): ID of the model to use\n        # Note: API key is hardcoded for this example, replace with secure handling in production\n\n    Returns:\n        str: The AI-generated response\n    \"\"\"\n    \n    # Using Boardflare API for demo purposes. Replace with any OpenAI compatible API endpoint.\n    # Sign up for your free Mistral API account at https://console.mistral.ai/ then replace the following:\n    \n    api_url = \"https://llm.boardflare.com\" # replace with \"https://api.mistral.ai/v1/chat/completions\"\n    api_key = \"cV4a59t1wjYGs....\" # replace with your Mistral API key\n    \n    # Construct the message incorporating both prompt and data if provided\n    message = prompt\n    if data is not None:\n        data_str = json.dumps(data, indent=2)\n        message += f\"\\n\\nData to analyze:\\n{data_str}\"\n    \n    # Prepare the API request payload\n    payload = {\n        \"messages\": [{\"role\": \"user\", \"content\": message}],\n        \"temperature\": temperature,\n        \"model\": model,\n        \"max_tokens\": max_tokens\n    }\n    \n    headers = {\n        \"Authorization\": f\"Bearer {api_key}\",\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n    }\n    \n    # Make the API request\n    response = requests.post(api_url, headers=headers, json=payload)\n    response.raise_for_status()\n    \n    # Extract and return the response content\n    response_data = response.json()\n    content = response_data[\"choices\"][0][\"message\"][\"content\"]\n\n    return content",
    "fileId": "1",
    "worksheet": "/**\n * ai_ask.js\n * \n * This script demonstrates how to use the AI_ASK function in Excel using the Excel JavaScript API.\n * It creates a workbook with examples of the function in use.\n */\n\nasync function createAiAskExample() {\n    try {\n        await Excel.run(async (context) => {\n            // Add a new worksheet for the examples\n            let sheet = context.workbook.worksheets.add(\"AI_ASK Examples\");\n\n            // Format header row\n            let headerRange = sheet.getRange(\"A1:B1\");\n            headerRange.values = [[\"Example\", \"Result\"]];\n            headerRange.format.font.bold = true;\n            headerRange.format.fill.color = \"#D9D9D9\";\n            sheet.getRange(\"A:B\").format.autofitColumns();\n\n            // Example 1: Basic question\n            sheet.getRange(\"A2\").values = [[\"Basic Question\"]];\n            sheet.getRange(\"A3\").values = [[\"=AI_ASK(\\\"What is the tallest mountain in the world?\\\")\"]];\n\n            // Example 2: Text summarization setup\n            sheet.getRange(\"A4\").values = [[\"Text Summarization\"]];\n            sheet.getRange(\"D1\").values = [[\"Sample Text for Summarization\"]];\n            let sampleText = \"The Industrial Revolution, which began in Great Britain in the late 18th century, \" +\n                \"was a period of major technological, socioeconomic, and cultural change. \" +\n                \"Key innovations included the steam engine, power loom, and advancements in iron production. \" +\n                \"This era transformed economies from agrarian and handicraft-based to industrial and machine-based, \" +\n                \"leading to urbanization and new social classes.\";\n            sheet.getRange(\"D2\").values = [[sampleText]];\n            sheet.getRange(\"A5\").values = [[\"=AI_ASK(\\\"Summarize the following text in one sentence:\\\", D2)\"]];\n\n            // Example 3: Data analysis setup\n            sheet.getRange(\"A6\").values = [[\"Data Analysis\"]];\n            sheet.getRange(\"F1\").values = [[\"Sales Data\"]];\n            let salesData = [\n                [\"Sales\"],\n                [150],\n                [200],\n                [175],\n                [225],\n                [190]\n            ];\n            sheet.getRange(\"F2:F7\").values = salesData;\n            sheet.getRange(\"A7\").values = [[\"=AI_ASK(\\\"What is the average of the sales figures provided?\\\", F2:F7)\"]];\n\n            // Example 4: Creative writing with custom parameters\n            sheet.getRange(\"A8\").values = [[\"Creative Writing (Custom Parameters)\"]];\n            sheet.getRange(\"A9\").values = [[\"=AI_ASK(\\\"Write a short paragraph about a robot discovering music for the first time.\\\", , 0.8, 300)\"]];\n\n            // Add instructions\n            sheet.getRange(\"A11:B11\").merge();\n            sheet.getRange(\"A11\").values = [[\"Note: This function requires an API key and internet connection to work.\"]];\n            sheet.getRange(\"A11\").format.font.italic = true;\n\n            // Autofit for better display\n            sheet.getUsedRange().format.autofitColumns();\n            sheet.getUsedRange().format.autofitRows();\n\n            // Activate the sheet\n            sheet.activate();\n\n            await context.sync();\n        });\n\n        console.log(\"AI_ASK examples workbook created successfully!\");\n    } catch (error) {\n        console.error(\"Error: \" + error);\n    }\n}\n\n// Run the function when the add-in is initialized\nOffice.onReady((info) => {\n    if (info.host === Office.HostType.Excel) {\n        // Register the function to be called from the UI\n        document.getElementById(\"create-examples-button\").onclick = createAiAskExample;\n    }\n});\n\n// HTML interface for the Add-in:\n/*\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>AI_ASK Function Examples</title>\n    <script src=\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\" type=\"text/javascript\"></script>\n    <script src=\"ai_ask.js\" type=\"text/javascript\"></script>\n    <style>\n        body { font-family: 'Segoe UI', sans-serif; margin: 20px; }\n        button { padding: 10px; background-color: #0078d4; color: white; border: none; border-radius: 4px; cursor: pointer; }\n        button:hover { background-color: #005a9e; }\n    </style>\n</head>\n<body>\n    <h1>AI_ASK Function Examples</h1>\n    <p>Click the button below to create a worksheet with AI_ASK function examples.</p>\n    <button id=\"create-examples-button\">Create Examples</button>\n</body>\n</html>\n*/"
  },
  {
    "name": "ai_choice",
    "description": "Uses AI to select the most appropriate value from a list of choices based on the input text.",
    "code": "import requests\nimport json\nimport re\n\ndef ai_choice(text, choices, temperature=0.0, model='mistral-small-2501', max_tokens=500):\n    \"\"\"\n    Uses AI to select the most appropriate value from a list of choices based on the input text.\n    \n    Args:\n        text (str or list): The text to analyze (string or 2D list with a single cell)\n        choices (str or list): String with comma-separated choices or 2D list of choices\n        temperature (float, optional): Controls response creativity (0-2). Default is 0\n        model (str, optional): ID of the model to use\n        max_tokens (int, optional): Maximum tokens for response generation. Default is 500\n        \n    Returns:\n        str: The selected choice from the provided options\n    \"\"\"\n    # Handle 2D list input for text (flatten to a single string)\n    if isinstance(text, list):\n        if len(text) > 0 and len(text[0]) > 0:\n            text = str(text[0][0])\n        else:\n            return \"Error: Empty input text.\"\n    \n    # Process choices input\n    choices_list = []\n    if isinstance(choices, str):\n        # Parse comma-separated string of choices\n        choices_list = [choice.strip() for choice in choices.split(',') if choice.strip()]\n    elif isinstance(choices, list):\n        # Extract choices from 2D list\n        for row in choices:\n            if row and len(row) > 0:\n                choices_list.append(str(row[0]))\n    \n    # Validate choices\n    if not choices_list:\n        return \"Error: No valid choices provided.\"\n    \n    # Using Boardflare API for demo purposes. Replace with any OpenAI compatible API endpoint.\n    api_url = \"https://llm.boardflare.com\" # replace with \"https://api.mistral.ai/v1/chat/completions\"\n    api_key = \"cV4a59t1wjYGs....\" # replace with your Mistral API key\n    \n    # Construct a specific prompt for selecting a choice\n    choices_formatted = \", \".join([f\"\\\"{choice}\\\"\" for choice in choices_list])\n    choice_prompt = f\"Select the most appropriate option from these choices: {choices_formatted}\\n\\nInput text: {text}\"\n    \n    # Add instruction for structured output\n    choice_prompt += \"\\n\\nReturn ONLY a JSON object with a 'selected_choice' field containing the exact choice you selected from the provided options. \"\n    choice_prompt += \"The selected choice must match exactly one of the provided options. \"\n    choice_prompt += \"Do not include any explanatory text, just the JSON object.\"\n    \n    # Prepare the API request payload\n    payload = {\n        \"messages\": [{\"role\": \"user\", \"content\": choice_prompt}],\n        \"temperature\": temperature,\n        \"model\": model,\n        \"max_tokens\": max_tokens,\n        \"response_format\": {\n            \"type\": \"json_object\",\n        }\n    }\n    \n    headers = {\n        \"Authorization\": f\"Bearer {api_key}\",\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n    }\n    \n    try:\n        # Make the API request\n        response = requests.post(api_url, headers=headers, json=payload)\n        response.raise_for_status()\n        \n        # Extract the response content\n        response_data = response.json()\n        content = response_data[\"choices\"][0][\"message\"][\"content\"]\n        # print(content)\n        \n        # Extract the selected choice from the response\n        try:\n            # Try to parse the content as JSON directly\n            choice_data = json.loads(content)\n            \n            # Get the selected choice from the JSON object\n            if isinstance(choice_data, dict) and \"selected_choice\" in choice_data:\n                selected = choice_data[\"selected_choice\"]\n                \n                # Verify the selected choice is in the original choices list\n                if selected in choices_list:\n                    return selected\n                else:\n                    # Try case-insensitive matching as fallback\n                    for choice in choices_list:\n                        if choice.lower() == selected.lower():\n                            return choice\n                    return \"Error: AI selected a choice that wasn't in the original options.\"\n            else:\n                return \"Error: Unable to parse response. Expected a JSON object with 'selected_choice' field.\"\n                \n        except (json.JSONDecodeError, ValueError):\n            # If JSON parsing fails, return an error message\n            return \"Error: Unable to determine choice. The AI response wasn't in the expected format.\"\n             \n    except requests.exceptions.RequestException as e:\n        # Handle API request errors\n        return f\"Error: API request failed. {str(e)}\"",
    "fileId": "2",
    "worksheet": "/**\n * ai_choice.js\n * \n * This script demonstrates how to use the AI_CHOICE function in Excel using the Excel JavaScript API.\n * It creates a workbook with examples of the function in use.\n */\n\nasync function createAiChoiceExample() {\n    try {\n        await Excel.run(async (context) => {\n            // Add a new worksheet for the examples\n            let sheet = context.workbook.worksheets.add(\"AI_CHOICE Examples\");\n\n            // Format header row\n            let headerRange = sheet.getRange(\"A1:B1\");\n            headerRange.values = [[\"Example\", \"Result\"]];\n            headerRange.format.font.bold = true;\n            headerRange.format.fill.color = \"#D9D9D9\";\n            sheet.getRange(\"A:B\").format.autofitColumns();\n\n            // Example 1: Categorizing Customer Support Tickets\n            sheet.getRange(\"A2\").values = [[\"Support Ticket Categorization\"]];\n            sheet.getRange(\"A3\").values = [[\"=AI_CHOICE(\\\"The mobile app crashes every time I try to upload a photo to my profile.\\\", \\\"Billing Issues, Technical Support, Account Access, Feature Request, Bug Report\\\")\"]];\n\n            // Example 2: Classifying Business Expenses\n            sheet.getRange(\"A4\").values = [[\"Business Expense Classification\"]];\n            sheet.getRange(\"A5\").values = [[\"=AI_CHOICE(\\\"Annual subscription for project management software - team of 12\\\", \\\"Travel, Software, Office Supplies, Professional Services, Rent, Marketing, Training\\\")\"]];\n\n            // Example 3: Sentiment Analysis\n            sheet.getRange(\"A6\").values = [[\"Sentiment Analysis\"]];\n            sheet.getRange(\"A7\").values = [[\"=AI_CHOICE(\\\"I've been using this service for 3 months and it has significantly improved our workflow. Would definitely recommend to others.\\\", \\\"Positive, Neutral, Negative\\\")\"]];\n\n            // Example 4: Department Assignment setup\n            sheet.getRange(\"A8\").values = [[\"Department Assignment\"]];\n            sheet.getRange(\"D1\").values = [[\"Department List\"]];\n            let departments = [\n                [\"Marketing\"],\n                [\"Engineering\"],\n                [\"Finance\"],\n                [\"HR\"],\n                [\"Sales\"],\n                [\"Operations\"]\n            ];\n            sheet.getRange(\"D2:D7\").values = departments;\n            sheet.getRange(\"A9\").values = [[\"=AI_CHOICE(\\\"Over 5 years of experience in digital marketing, specializing in social media campaigns and analytics. Proficient in Google Analytics, Facebook Ads Manager, and SEO optimization. Bachelor's degree in Marketing.\\\", D2:D7)\"]];\n\n            // Example 5: Project Risk Assessment\n            sheet.getRange(\"A10\").values = [[\"Risk Assessment\"]];\n            sheet.getRange(\"A11\").values = [[\"=AI_CHOICE(\\\"Key vendor may experience supply chain delays that could impact delivery timeline by 1-2 weeks, but alternative suppliers have been identified.\\\", \\\"High Risk, Medium Risk, Low Risk\\\")\"]];\n\n            // Add instructions\n            sheet.getRange(\"A13:B13\").merge();\n            sheet.getRange(\"A13\").values = [[\"Note: This function requires an API key and internet connection to work.\"]];\n            sheet.getRange(\"A13\").format.font.italic = true;\n\n            // Autofit for better display\n            sheet.getUsedRange().format.autofitColumns();\n            sheet.getUsedRange().format.autofitRows();\n\n            // Activate the sheet\n            sheet.activate();\n\n            await context.sync();\n        });\n\n        console.log(\"AI_CHOICE examples workbook created successfully!\");\n    } catch (error) {\n        console.error(\"Error: \" + error);\n    }\n}\n\n// Run the function when the add-in is initialized\nOffice.onReady((info) => {\n    if (info.host === Office.HostType.Excel) {\n        // Register the function to be called from the UI\n        document.getElementById(\"create-examples-button\").onclick = createAiChoiceExample;\n    }\n});\n\n// HTML interface for the Add-in:\n/*\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>AI_CHOICE Function Examples</title>\n    <script src=\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\" type=\"text/javascript\"></script>\n    <script src=\"ai_choice.js\" type=\"text/javascript\"></script>\n    <style>\n        body { font-family: 'Segoe UI', sans-serif; margin: 20px; }\n        button { padding: 10px; background-color: #0078d4; color: white; border: none; border-radius: 4px; cursor: pointer; }\n        button:hover { background-color: #005a9e; }\n    </style>\n</head>\n<body>\n    <h1>AI_CHOICE Function Examples</h1>\n    <p>Click the button below to create a worksheet with AI_CHOICE function examples.</p>\n    <button id=\"create-examples-button\">Create Examples</button>\n</body>\n</html>\n*/"
  },
  {
    "name": "ai_extract",
    "description": "Uses AI to extract specific types of information from text.",
    "code": "import requests\nimport json\n\ndef ai_extract(text, extract_type, temperature=0.0, model='mistral-small-2501', max_tokens=1000):\n    \"\"\"\n    Uses AI to extract specific types of information from text.\n    \n    Args:\n        text (str or list): The text to analyze (string or 2D list with a single cell)\n        extract_type (str): Type of information to extract (e.g., 'emails', 'dates', 'action items')\n        temperature (float, optional): Controls response creativity (0-2). Default is 0\n        model (str, optional): ID of the model to use\n        max_tokens (int, optional): Maximum tokens for response generation. Default is 1000\n        \n    Returns:\n        list: 2D list representing the extracted data as a single column\n    \"\"\"\n    # Handle 2D list input (flatten to a single string)\n    if isinstance(text, list):\n        if len(text) > 0 and len(text[0]) > 0:\n            text = str(text[0][0])\n        else:\n            return [[\"Error: Empty input text.\"]]\n    \n    # Using Boardflare API for demo purposes. Replace with any OpenAI compatible API endpoint.\n    api_url = \"https://llm.boardflare.com\" # replace with \"https://api.mistral.ai/v1/chat/completions\"\n    api_key = \"cV4a59t1wjYGs....\" # replace with your Mistral API key\n    \n    # Construct a specific prompt for data extraction\n    extract_prompt = f\"Extract the following from the text: {extract_type}\\n\\nText: {text}\"\n    \n    # Add instruction for structured output\n    extract_prompt += \"\\n\\nReturn ONLY a JSON array of items you extracted. \"\n    extract_prompt += \"Each item should be a single value representing one extracted piece of information. \"\n    extract_prompt += \"Do not include any explanatory text, just the JSON array.\"\n    \n    # Prepare the API request payload\n    payload = {\n        \"messages\": [{\"role\": \"user\", \"content\": extract_prompt}],\n        \"temperature\": temperature,\n        \"model\": model,\n        \"max_tokens\": max_tokens,\n        \"response_format\": {\n            \"type\": \"json_object\",\n        }\n    }\n    \n    headers = {\n        \"Authorization\": f\"Bearer {api_key}\",\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n    }\n    \n    try:\n        # Make the API request\n        response = requests.post(api_url, headers=headers, json=payload)\n        response.raise_for_status()\n        \n        # Extract the response content\n        response_data = response.json()\n        content = response_data[\"choices\"][0][\"message\"][\"content\"]\n        # print(content)\n        \n        # Extract the JSON array from the response\n        try:\n            # Try to parse the content as JSON directly\n            extracted_data = json.loads(content)\n            \n            # If extracted_data is a dictionary with an \"items\" or \"extracted\" key, use that\n            if isinstance(extracted_data, dict):\n                if \"items\" in extracted_data:\n                    extracted_data = extracted_data[\"items\"]\n                elif \"extracted\" in extracted_data:\n                    extracted_data = extracted_data[\"extracted\"]\n                elif \"results\" in extracted_data:\n                    extracted_data = extracted_data[\"results\"]\n            \n            # Convert the list to a 2D list (single column)\n            if isinstance(extracted_data, list):\n                return [[item] for item in extracted_data]\n            else:\n                return [[\"Error: Unable to parse response. Expected a list.\"]]\n                \n        except (json.JSONDecodeError, ValueError):\n            # If JSON parsing fails, return an error message as a single cell\n            return [[\"Error: Unable to extract data. The AI response wasn't in the expected format.\"]]\n             \n    except requests.exceptions.RequestException as e:\n        # Handle API request errors\n        return [[\"Error: API request failed.\", str(e)]]",
    "fileId": "3",
    "worksheet": "/**\n * ai_extract.js\n * \n * This script demonstrates how to use the AI_EXTRACT function in Excel using the Excel JavaScript API.\n * It creates a workbook with examples of the function in use.\n */\n\nasync function createAiExtractExample() {\n    try {\n        await Excel.run(async (context) => {\n            // Add a new worksheet for the examples\n            let sheet = context.workbook.worksheets.add(\"AI_EXTRACT Examples\");\n\n            // Format header row\n            let headerRange = sheet.getRange(\"A1:B1\");\n            headerRange.values = [[\"Example\", \"Result\"]];\n            headerRange.format.font.bold = true;\n            headerRange.format.fill.color = \"#D9D9D9\";\n            sheet.getRange(\"A:B\").format.autofitColumns();\n\n            // Example 1: Extracting dates from text\n            sheet.getRange(\"A2\").values = [[\"Extract Dates from Text\"]];\n            sheet.getRange(\"D1\").values = [[\"Sample Text with Dates\"]];\n            let dateText = \"The quarterly board meeting is scheduled for March 18, 2025 at 2:00 PM. \" +\n                \"Please prepare the financial reports by March 15th, and the presentation slides by March 17th.\";\n            sheet.getRange(\"D2\").values = [[dateText]];\n            sheet.getRange(\"A3\").values = [[\"=AI_EXTRACT(D2, \\\"dates\\\")\"]];\n\n            // Example 2: Extracting contact information from text\n            sheet.getRange(\"A4\").values = [[\"Extract Contact Information\"]];\n            sheet.getRange(\"E1\").values = [[\"Sample Text with Contacts\"]];\n            let contactText = \"Please contact our new clients: Jane Smith (jane.smith@example.com, 555-123-4567) \" +\n                \"and John Doe (john.doe@example.org, 555-987-6543) to schedule the initial consultation.\";\n            sheet.getRange(\"E2\").values = [[contactText]];\n            sheet.getRange(\"A5\").values = [[\"=AI_EXTRACT(E2, \\\"contact information\\\")\"]];\n\n            // Example 3: Extracting project milestones from text\n            sheet.getRange(\"A6\").values = [[\"Extract Project Milestones\"]];\n            sheet.getRange(\"F1\").values = [[\"Sample Text with Project Milestones\"]];\n            let milestonesText = \"Project milestones: 1) Requirements gathering (complete by May 1), \" +\n                \"2) Design phase (May 2-15), 3) Development (May 16-June 20), 4) Testing (June 21-30), 5) Deployment (July 1).\";\n            sheet.getRange(\"F2\").values = [[milestonesText]];\n            sheet.getRange(\"A7\").values = [[\"=AI_EXTRACT(F2, \\\"project milestones\\\")\"]];\n\n            // Example 4: Extracting action items with custom parameters\n            sheet.getRange(\"A8\").values = [[\"Extract Action Items (Custom Parameters)\"]];\n            sheet.getRange(\"G1\").values = [[\"Sample Text with Action Items\"]];\n            let actionItemsText = \"Following our meeting: 1) Mark needs to finalize the budget by Friday, \" +\n                \"2) Sarah will contact vendors for new quotes, 3) Development team must provide timeline estimates \" +\n                \"by next Wednesday, and 4) Everyone should review the new marketing materials.\";\n            sheet.getRange(\"G2\").values = [[actionItemsText]];\n            sheet.getRange(\"A9\").values = [[\"=AI_EXTRACT(G2, \\\"action items\\\", 0.2, \\\"mistral-small-2501\\\", 800)\"]];\n\n            // Add instructions\n            sheet.getRange(\"A11:B11\").merge();\n            sheet.getRange(\"A11\").values = [[\"Note: This function requires an API key and internet connection to work.\"]];\n            sheet.getRange(\"A11\").format.font.italic = true;\n\n            // Autofit for better display\n            sheet.getUsedRange().format.autofitColumns();\n            sheet.getUsedRange().format.autofitRows();\n\n            // Activate the sheet\n            sheet.activate();\n\n            await context.sync();\n        });\n\n        console.log(\"AI_EXTRACT examples workbook created successfully!\");\n    } catch (error) {\n        console.error(\"Error: \" + error);\n    }\n}\n\n// Run the function when the add-in is initialized\nOffice.onReady((info) => {\n    if (info.host === Office.HostType.Excel) {\n        // Register the function to be called from the UI\n        document.getElementById(\"create-examples-button\").onclick = createAiExtractExample;\n    }\n});\n\n// HTML interface for the Add-in:\n/*\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>AI_EXTRACT Function Examples</title>\n    <script src=\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\" type=\"text/javascript\"></script>\n    <script src=\"ai_extract.js\" type=\"text/javascript\"></script>\n    <style>\n        body { font-family: 'Segoe UI', sans-serif; margin: 20px; }\n        button { padding: 10px; background-color: #0078d4; color: white; border: none; border-radius: 4px; cursor: pointer; }\n        button:hover { background-color: #005a9e; }\n    </style>\n</head>\n<body>\n    <h1>AI_EXTRACT Function Examples</h1>\n    <p>Click the button below to create a worksheet with AI_EXTRACT function examples.</p>\n    <button id=\"create-examples-button\">Create Examples</button>\n</body>\n</html>\n*/"
  },
  {
    "name": "ai_fill",
    "description": "Uses AI to fill in missing data in a target range by learning patterns from an example range.",
    "code": "import requests\nimport json\n\ndef ai_fill(example_range, fill_range, temperature=0.0, model='mistral-small-2501', max_tokens=1500):\n    \"\"\"\n    Uses AI to fill in missing data in a target range by learning patterns from an example range.\n    \n    Args:\n        example_range (list): 2D list containing complete data as examples for the AI to learn from\n        fill_range (list): 2D list containing data with missing values to be filled\n        temperature (float, optional): Controls response creativity (0-2). Default is 0\n        model (str, optional): ID of the model to use\n        max_tokens (int, optional): Maximum tokens for response generation. Default is 1500\n        \n    Returns:\n        list: 2D list with missing data filled in\n    \"\"\"\n    # Validate inputs\n    if not isinstance(example_range, list) or not example_range:\n        return [[\"Error: Example range is empty or invalid.\"]]\n    if not isinstance(fill_range, list) or not fill_range:\n        return [[\"Error: Fill range is empty or invalid.\"]]\n    \n    # Using Boardflare API for demo purposes. Replace with any OpenAI compatible API endpoint.\n    api_url = \"https://llm.boardflare.com\" # replace with \"https://api.mistral.ai/v1/chat/completions\"\n    api_key = \"cV4a59t1wjYGs....\" # replace with your Mistral API key\n    \n    # Convert example_range and fill_range to JSON strings for the prompt\n    example_json = json.dumps(example_range)\n    fill_json = json.dumps(fill_range)\n    \n    # Construct a specific prompt for filling data\n    fill_prompt = \"\"\"Fill in the missing values in the target data based on patterns in the example data.\nExample data (complete): {}\\n\\n\nTarget data (with missing values): {}\\n\\n\nStudy the patterns in the example data and complete the target data by filling in missing values. Preserve all existing values in the target data.\"\"\".format(\n        example_json, fill_json\n    )\n    \n    # Add instruction for structured output\n    fill_prompt += \"\\n\\nReturn ONLY a JSON array of arrays (2D array) with the completed target data. \"\n    fill_prompt += \"Do not include any explanatory text, just the JSON array.\"\n    \n    # Prepare the API request payload\n    payload = {\n        \"messages\": [{\"role\": \"user\", \"content\": fill_prompt}],\n        \"temperature\": temperature,\n        \"model\": model,\n        \"max_tokens\": max_tokens,\n        \"response_format\": {\n            \"type\": \"json_object\",\n        }\n    }\n    \n    headers = {\n        \"Authorization\": f\"Bearer {api_key}\",\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n    }\n    \n    try:\n        # Make the API request\n        response = requests.post(api_url, headers=headers, json=payload)\n        response.raise_for_status()\n        \n        # Extract the response content\n        response_data = response.json()\n        content = response_data[\"choices\"][0][\"message\"][\"content\"]\n        # print(content)\n        \n        # Extract the filled data from the response\n        try:\n            # Try to parse the content as JSON directly\n            filled_data = json.loads(content)\n            \n            # If filled_data is a dictionary with a \"data\" or \"filled_data\" key, use that\n            if isinstance(filled_data, dict):\n                if \"data\" in filled_data:\n                    filled_data = filled_data[\"data\"]\n                elif \"filled_data\" in filled_data:\n                    filled_data = filled_data[\"filled_data\"]\n                elif \"result\" in filled_data:\n                    filled_data = filled_data[\"result\"]\n            \n            # Ensure the filled data is a 2D list\n            if isinstance(filled_data, list) and all(isinstance(row, list) for row in filled_data):\n                # Ensure the dimensions match the original fill_range\n                if (len(filled_data) == len(fill_range) and \n                    all(len(row) == len(fill_range[i]) for i, row in enumerate(filled_data))):\n                    return filled_data\n                else:\n                    return [[\"Error: AI response dimensions don't match the fill range.\"]]\n            else:\n                return [[\"Error: Unable to parse response. Expected a 2D array.\"]]\n                \n        except (json.JSONDecodeError, ValueError):\n            # If JSON parsing fails, return an error message\n            return [[\"Error: Unable to fill data. The AI response wasn't in the expected format.\"]]\n             \n    except requests.exceptions.RequestException as e:\n        # Handle API request errors\n        return [[\"Error: API request failed.\", str(e)]]",
    "fileId": "4",
    "worksheet": "/**\n * ai_fill.js\n * \n * This script demonstrates how to use the AI_FILL function in Excel using the Excel JavaScript API.\n * It creates a workbook with examples of the function in use.\n */\n\nasync function createAiFillExample() {\n    try {\n        await Excel.run(async (context) => {\n            // Add a new worksheet for the examples\n            let sheet = context.workbook.worksheets.add(\"AI_FILL Examples\");\n\n            // Format header row\n            let headerRange = sheet.getRange(\"A1:B1\");\n            headerRange.values = [[\"Example\", \"Result\"]];\n            headerRange.format.font.bold = true;\n            headerRange.format.fill.color = \"#D9D9D9\";\n            sheet.getRange(\"A:B\").format.autofitColumns();\n\n            // Example 1: Product Catalog\n            // Setup example data\n            sheet.getRange(\"D1\").values = [[\"Example Data: Product Catalog\"]];\n            sheet.getRange(\"D1:G1\").format.font.bold = true;\n\n            let exampleData = [\n                [\"Product ID\", \"Category\", \"Price\", \"Weight (kg)\"],\n                [\"PRD-001\", \"Laptop\", 1299, 1.8],\n                [\"PRD-002\", \"Laptop\", 999, 2.1],\n                [\"PRD-003\", \"Tablet\", 499, 0.7]\n            ];\n\n            sheet.getRange(\"D2:G5\").values = exampleData;\n            sheet.getRange(\"D2:G5\").format.borders.getItem('EdgeBottom').style = 'Continuous';\n            sheet.getRange(\"D2:G5\").format.borders.getItem('EdgeLeft').style = 'Continuous';\n            sheet.getRange(\"D2:G5\").format.borders.getItem('EdgeRight').style = 'Continuous';\n            sheet.getRange(\"D2:G5\").format.borders.getItem('EdgeTop').style = 'Continuous';\n            sheet.getRange(\"D2:G5\").format.borders.getItem('InsideHorizontal').style = 'Continuous';\n            sheet.getRange(\"D2:G5\").format.borders.getItem('InsideVertical').style = 'Continuous';\n\n            // Setup fill data\n            sheet.getRange(\"D7\").values = [[\"Fill Data: Product Catalog with Missing Values\"]];\n            sheet.getRange(\"D7:G7\").format.font.bold = true;\n\n            let fillData = [\n                [\"Product ID\", \"Category\", \"Price\", \"Weight (kg)\"],\n                [\"PRD-004\", \"Laptop\", \"\", \"\"],\n                [\"PRD-005\", \"Tablet\", \"\", \"\"],\n                [\"PRD-006\", \"\", 799, 1.2]\n            ];\n\n            sheet.getRange(\"D8:G11\").values = fillData;\n            sheet.getRange(\"D8:G11\").format.borders.getItem('EdgeBottom').style = 'Continuous';\n            sheet.getRange(\"D8:G11\").format.borders.getItem('EdgeLeft').style = 'Continuous';\n            sheet.getRange(\"D8:G11\").format.borders.getItem('EdgeRight').style = 'Continuous';\n            sheet.getRange(\"D8:G11\").format.borders.getItem('EdgeTop').style = 'Continuous';\n            sheet.getRange(\"D8:G11\").format.borders.getItem('InsideHorizontal').style = 'Continuous';\n            sheet.getRange(\"D8:G11\").format.borders.getItem('InsideVertical').style = 'Continuous';\n\n            // Create formula\n            sheet.getRange(\"A2\").values = [[\"Product Catalog Completion\"]];\n            sheet.getRange(\"A3\").values = [[\"=AI_FILL(D2:G5, D8:G11)\"]];\n\n            // Example 2: Employee Information\n            // Setup example data\n            sheet.getRange(\"D13\").values = [[\"Example Data: Employee Information\"]];\n            sheet.getRange(\"D13:G13\").format.font.bold = true;\n\n            let employeeData = [\n                [\"Employee ID\", \"Job Title\", \"Department\", \"Location\"],\n                [\"EMP-001\", \"Sales Manager\", \"Sales\", \"New York\"],\n                [\"EMP-002\", \"Marketing Specialist\", \"Marketing\", \"Chicago\"],\n                [\"EMP-003\", \"Sales Representative\", \"Sales\", \"Los Angeles\"],\n                [\"EMP-004\", \"Software Developer\", \"Engineering\", \"San Francisco\"]\n            ];\n\n            sheet.getRange(\"D14:G18\").values = employeeData;\n            sheet.getRange(\"D14:G18\").format.borders.getItem('EdgeBottom').style = 'Continuous';\n            sheet.getRange(\"D14:G18\").format.borders.getItem('EdgeLeft').style = 'Continuous';\n            sheet.getRange(\"D14:G18\").format.borders.getItem('EdgeRight').style = 'Continuous';\n            sheet.getRange(\"D14:G18\").format.borders.getItem('EdgeTop').style = 'Continuous';\n            sheet.getRange(\"D14:G18\").format.borders.getItem('InsideHorizontal').style = 'Continuous';\n            sheet.getRange(\"D14:G18\").format.borders.getItem('InsideVertical').style = 'Continuous';\n\n            // Setup fill data\n            sheet.getRange(\"D20\").values = [[\"Fill Data: Employee Information with Missing Values\"]];\n            sheet.getRange(\"D20:G20\").format.font.bold = true;\n\n            let employeeFillData = [\n                [\"Employee ID\", \"Job Title\", \"Department\", \"Location\"],\n                [\"EMP-005\", \"Sales Director\", \"\", \"\"],\n                [\"EMP-006\", \"UX Designer\", \"\", \"\"],\n                [\"EMP-007\", \"Marketing Director\", \"\", \"\"],\n                [\"EMP-008\", \"Senior Developer\", \"\", \"\"]\n            ];\n\n            sheet.getRange(\"D21:G25\").values = employeeFillData;\n            sheet.getRange(\"D21:G25\").format.borders.getItem('EdgeBottom').style = 'Continuous';\n            sheet.getRange(\"D21:G25\").format.borders.getItem('EdgeLeft').style = 'Continuous';\n            sheet.getRange(\"D21:G25\").format.borders.getItem('EdgeRight').style = 'Continuous';\n            sheet.getRange(\"D21:G25\").format.borders.getItem('EdgeTop').style = 'Continuous';\n            sheet.getRange(\"D21:G25\").format.borders.getItem('InsideHorizontal').style = 'Continuous';\n            sheet.getRange(\"D21:G25\").format.borders.getItem('InsideVertical').style = 'Continuous';\n\n            // Create formula with parameters\n            sheet.getRange(\"A4\").values = [[\"Employee Information Completion (with parameters)\"]];\n            sheet.getRange(\"A5\").values = [[\"=AI_FILL(D14:G18, D21:G25, 0.3, \\\"mistral-small\\\")\"]];\n\n            // Example 3: Financial Data\n            // Setup example data\n            sheet.getRange(\"I1\").values = [[\"Example Data: Quarterly Projections\"]];\n            sheet.getRange(\"I1:M1\").format.font.bold = true;\n\n            let financialData = [\n                [\"Metric\", \"Q1 2024\", \"Q2 2024\", \"Q3 2024\", \"Q4 2024\"],\n                [\"Revenue\", 250000, 280000, 310000, 350000],\n                [\"Expenses\", 180000, 195000, 215000, 235000]\n            ];\n\n            sheet.getRange(\"I2:M4\").values = financialData;\n            sheet.getRange(\"I2:M4\").format.borders.getItem('EdgeBottom').style = 'Continuous';\n            sheet.getRange(\"I2:M4\").format.borders.getItem('EdgeLeft').style = 'Continuous';\n            sheet.getRange(\"I2:M4\").format.borders.getItem('EdgeRight').style = 'Continuous';\n            sheet.getRange(\"I2:M4\").format.borders.getItem('EdgeTop').style = 'Continuous';\n            sheet.getRange(\"I2:M4\").format.borders.getItem('InsideHorizontal').style = 'Continuous';\n            sheet.getRange(\"I2:M4\").format.borders.getItem('InsideVertical').style = 'Continuous';\n\n            // Setup fill data\n            sheet.getRange(\"I6\").values = [[\"Fill Data: Quarterly Projections with Missing Values\"]];\n            sheet.getRange(\"I6:M6\").format.font.bold = true;\n\n            let financialFillData = [\n                [\"Metric\", \"Q1 2024\", \"Q2 2024\", \"Q3 2024\", \"Q4 2024\"],\n                [\"Profit\", \"\", \"\", \"\", \"\"],\n                [\"Headcount\", 32, 35, \"\", \"\"]\n            ];\n\n            sheet.getRange(\"I7:M9\").values = financialFillData;\n            sheet.getRange(\"I7:M9\").format.borders.getItem('EdgeBottom').style = 'Continuous';\n            sheet.getRange(\"I7:M9\").format.borders.getItem('EdgeLeft').style = 'Continuous';\n            sheet.getRange(\"I7:M9\").format.borders.getItem('EdgeRight').style = 'Continuous';\n            sheet.getRange(\"I7:M9\").format.borders.getItem('EdgeTop').style = 'Continuous';\n            sheet.getRange(\"I7:M9\").format.borders.getItem('InsideHorizontal').style = 'Continuous';\n            sheet.getRange(\"I7:M9\").format.borders.getItem('InsideVertical').style = 'Continuous';\n\n            // Create formula\n            sheet.getRange(\"A6\").values = [[\"Financial Projections Completion\"]];\n            sheet.getRange(\"A7\").values = [[\"=AI_FILL(I2:M4, I7:M9)\"]];\n\n            // Add instructions\n            sheet.getRange(\"A9:B9\").merge();\n            sheet.getRange(\"A9\").values = [[\"Note: This function requires an API key and internet connection to work.\"]];\n            sheet.getRange(\"A9\").format.font.italic = true;\n\n            // Autofit for better display\n            sheet.getUsedRange().format.autofitColumns();\n            sheet.getUsedRange().format.autofitRows();\n\n            // Activate the sheet\n            sheet.activate();\n\n            await context.sync();\n        });\n\n        console.log(\"AI_FILL examples workbook created successfully!\");\n    } catch (error) {\n        console.error(\"Error: \" + error);\n    }\n}\n\n// Run the function when the add-in is initialized\nOffice.onReady((info) => {\n    if (info.host === Office.HostType.Excel) {\n        // Register the function to be called from the UI\n        document.getElementById(\"create-examples-button\").onclick = createAiFillExample;\n    }\n});\n\n// HTML interface for the Add-in:\n/*\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>AI_FILL Function Examples</title>\n    <script src=\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\" type=\"text/javascript\"></script>\n    <script src=\"ai_fill.js\" type=\"text/javascript\"></script>\n    <style>\n        body { font-family: 'Segoe UI', sans-serif; margin: 20px; }\n        button { padding: 10px; background-color: #0078d4; color: white; border: none; border-radius: 4px; cursor: pointer; }\n        button:hover { background-color: #005a9e; }\n    </style>\n</head>\n<body>\n    <h1>AI_FILL Function Examples</h1>\n    <p>Click the button below to create a worksheet with AI_FILL function examples.</p>\n    <button id=\"create-examples-button\">Create Examples</button>\n</body>\n</html>\n*/"
  },
  {
    "name": "ai_format",
    "description": "Uses AI to format text according to a specific structure or pattern.",
    "code": "import requests\nimport json\n\ndef ai_format(text, format_instruction, temperature=0.0, model='mistral-small-2501', max_tokens=1500):\n    \"\"\"\n    Uses AI to format text according to a specific structure or pattern.\n    \n    Args:\n        text (str or list): The text to format (string or 2D list with a single cell)\n        format_instruction (str): Instructions describing the desired format\n        temperature (float, optional): Controls response creativity (0-2). Default is 0\n        model (str, optional): ID of the model to use\n        max_tokens (int, optional): Maximum tokens for response generation. Default is 1500\n        \n    Returns:\n        str: The formatted text according to the specified format\n    \"\"\"\n    # Handle 2D list input (flatten to a single string)\n    if isinstance(text, list):\n        if len(text) > 0 and len(text[0]) > 0:\n            text = str(text[0][0])\n        else:\n            return \"Error: Empty input text.\"\n    \n    # Using Boardflare API for demo purposes. Replace with any OpenAI compatible API endpoint.\n    api_url = \"https://llm.boardflare.com\" # replace with \"https://api.mistral.ai/v1/chat/completions\"\n    api_key = \"cV4a59t1wjYGs....\" # replace with your Mistral API key\n    \n    # Construct a specific prompt for formatting\n    format_prompt = f\"Format the following text according to this format instruction: {format_instruction}\\n\\nText to format: {text}\"\n    \n    # Add instruction for structured output\n    format_prompt += \"\\n\\nReturn ONLY a JSON object with a 'formatted_text' field containing the formatted result. \"\n    format_prompt += \"Do not include any explanatory text, just the JSON object.\"\n    \n    # Prepare the API request payload\n    payload = {\n        \"messages\": [{\"role\": \"user\", \"content\": format_prompt}],\n        \"temperature\": temperature,\n        \"model\": model,\n        \"max_tokens\": max_tokens,\n        \"response_format\": {\n            \"type\": \"json_object\",\n        }\n    }\n    \n    headers = {\n        \"Authorization\": f\"Bearer {api_key}\",\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n    }\n    \n    try:\n        # Make the API request\n        response = requests.post(api_url, headers=headers, json=payload)\n        response.raise_for_status()\n        \n        # Extract the response content\n        response_data = response.json()\n        content = response_data[\"choices\"][0][\"message\"][\"content\"]\n        # print(content)\n        \n        # Extract the formatted text from the response\n        try:\n            # Try to parse the content as JSON directly\n            formatted_data = json.loads(content)\n            \n            # Get the formatted text from the JSON object\n            if isinstance(formatted_data, dict) and \"formatted_text\" in formatted_data:\n                return formatted_data[\"formatted_text\"]\n            else:\n                return \"Error: Unable to parse response. Expected a JSON object with 'formatted_text' field.\"\n                \n        except (json.JSONDecodeError, ValueError):\n            # If JSON parsing fails, return an error message\n            return \"Error: Unable to format text. The AI response wasn't in the expected format.\"\n             \n    except requests.exceptions.RequestException as e:\n        # Handle API request errors\n        return f\"Error: API request failed. {str(e)}\"",
    "fileId": "5",
    "worksheet": "/**\n * ai_format.js\n * \n * This script demonstrates how to use the AI_FORMAT function in Excel using the Excel JavaScript API.\n * It creates a workbook with examples of the function in use.\n */\n\nasync function createAiFormatExample() {\n    try {\n        await Excel.run(async (context) => {\n            // Add a new worksheet for the examples\n            let sheet = context.workbook.worksheets.add(\"AI_FORMAT Examples\");\n\n            // Format header row\n            let headerRange = sheet.getRange(\"A1:B1\");\n            headerRange.values = [[\"Example\", \"Result\"]];\n            headerRange.format.font.bold = true;\n            headerRange.format.fill.color = \"#D9D9D9\";\n            sheet.getRange(\"A:B\").format.autofitColumns();\n\n            // Example 1: Business Contact Format\n            sheet.getRange(\"A2\").values = [[\"Business Contact Format\"]];\n            sheet.getRange(\"D1\").values = [[\"Contact Information\"]];\n            sheet.getRange(\"D2\").values = [[\"John Smith / Marketing Director - Acme Inc / jsmith@acme.co - 555.123.4567\"]];\n            sheet.getRange(\"A3\").values = [[\"=AI_FORMAT(D2, \\\"standard business contact card format\\\")\"]];\n\n            // Example 2: Financial Data Format\n            sheet.getRange(\"A4\").values = [[\"Financial Data Format\"]];\n            sheet.getRange(\"E1\").values = [[\"Financial Data\"]];\n            sheet.getRange(\"E2\").values = [[\"Revenue: 2.4m; COGS: 1.1m; Gross Margin: 1.3m (54%); Opex: 950k; EBITDA: 350k\"]];\n            sheet.getRange(\"A5\").values = [[\"=AI_FORMAT(E2, \\\"professional financial statement format with proper currency notation\\\")\"]];\n\n            // Example 3: Product Review Format\n            sheet.getRange(\"A6\").values = [[\"Product Review Format\"]];\n            sheet.getRange(\"F1\").values = [[\"Customer Feedback\"]];\n            let feedback = \"Used the product for 3 weeks. Good quality but shipping took forever. Customer service was helpful though. \" +\n                \"Probably would buy again if they fix delivery issues.\";\n            sheet.getRange(\"F2\").values = [[feedback]];\n            sheet.getRange(\"A7\").values = [[\"=AI_FORMAT(F2, \\\"structured product review with ratings\\\")\"]];\n\n            // Example 4: Address Standardization\n            sheet.getRange(\"A8\").values = [[\"Address Standardization\"]];\n            sheet.getRange(\"G1\").values = [[\"Address Data\"]];\n            sheet.getRange(\"G2\").values = [[\"123 business park dr suite 12, austin tx 78701\"]];\n            sheet.getRange(\"A9\").values = [[\"=AI_FORMAT(G2, \\\"standard US business address format\\\")\"]];\n\n            // Example 5: Action Items Format with Custom Parameters\n            sheet.getRange(\"A10\").values = [[\"Action Items Format (Custom Parameters)\"]];\n            sheet.getRange(\"H1\").values = [[\"Meeting Notes\"]];\n            let notes = \"Tom said we need to finish the report by Friday. Maria will contact the client about budget concerns. \" +\n                \"Everyone should review the new marketing strategy before next meeting on 5/10.\";\n            sheet.getRange(\"H2\").values = [[notes]];\n            sheet.getRange(\"A11\").values = [[\"=AI_FORMAT(H2, \\\"action items with responsible parties and deadlines\\\", 0.2, \\\"mistral-small-2501\\\", 500)\"]];\n\n            // Add instructions\n            sheet.getRange(\"A13:B13\").merge();\n            sheet.getRange(\"A13\").values = [[\"Note: This function requires an API key and internet connection to work.\"]];\n            sheet.getRange(\"A13\").format.font.italic = true;\n\n            // Autofit for better display\n            sheet.getUsedRange().format.autofitColumns();\n            sheet.getUsedRange().format.autofitRows();\n\n            // Activate the sheet\n            sheet.activate();\n\n            await context.sync();\n        });\n\n        console.log(\"AI_FORMAT examples workbook created successfully!\");\n    } catch (error) {\n        console.error(\"Error: \" + error);\n    }\n}\n\n// Run the function when the add-in is initialized\nOffice.onReady((info) => {\n    if (info.host === Office.HostType.Excel) {\n        // Register the function to be called from the UI\n        document.getElementById(\"create-examples-button\").onclick = createAiFormatExample;\n    }\n});\n\n// HTML interface for the Add-in:\n/*\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>AI_FORMAT Function Examples</title>\n    <script src=\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\" type=\"text/javascript\"></script>\n    <script src=\"ai_format.js\" type=\"text/javascript\"></script>\n    <style>\n        body { font-family: 'Segoe UI', sans-serif; margin: 20px; }\n        button { padding: 10px; background-color: #0078d4; color: white; border: none; border-radius: 4px; cursor: pointer; }\n        button:hover { background-color: #005a9e; }\n    </style>\n</head>\n<body>\n    <h1>AI_FORMAT Function Examples</h1>\n    <p>Click the button below to create a worksheet with AI_FORMAT function examples.</p>\n    <button id=\"create-examples-button\">Create Examples</button>\n</body>\n</html>\n*/"
  },
  {
    "name": "ai_list",
    "description": "Uses AI to generate a list of items based on the prompt and optional values data.",
    "code": "import requests\nimport json\n\ndef ai_list(prompt, values=None, temperature=0.0, model='mistral-small-2501', max_tokens=1000):\n    \"\"\"\n    Uses AI to generate a list of items based on the prompt and optional values data.\n    \n    Args:\n        prompt (str): Instruction for AI to create a list\n        values (list, optional): 2D list containing additional data to append to prompt\n        temperature (float, optional): Controls response creativity (0-2). Default is 0\n        model (str, optional): ID of the model to use\n        max_tokens (int, optional): Maximum tokens for response generation. Default is 1000\n        \n    Returns:\n        list: 2D list representing the generated list data as a single column\n    \"\"\"\n    # Using Boardflare API for demo purposes. Replace with any OpenAI compatible API endpoint.\n    api_url = \"https://llm.boardflare.com\" # replace with \"https://api.mistral.ai/v1/chat/completions\"\n    api_key = \"cV4a59t1wjYGs....\" # replace with your Mistral API key\n    \n    # Construct a specific prompt for list generation\n    list_prompt = f\"Generate a list based on this request: {prompt}\"\n    \n    # Add values information if provided\n    if values is not None:\n        values_str = \"\\n\".join([str(item[0]) for item in values]) if len(values) > 0 and len(values[0]) > 0 else \"\"\n        if values_str:\n            list_prompt += f\"\\n\\nUse this information to help create the list:\\n{values_str}\"\n    \n    # Add instruction for structured output\n    list_prompt += \"\\nReturn ONLY a JSON array of items for the list. \"\n    list_prompt += \"Each item should be a single value. \"\n    list_prompt += \"Do not include any explanatory text, just the JSON array.\"\n    \n    # Prepare the API request payload\n    payload = {\n        \"messages\": [{\"role\": \"user\", \"content\": list_prompt}],\n        \"temperature\": temperature,\n        \"model\": model,\n        \"max_tokens\": max_tokens,\n        \"response_format\": {\n            \"type\": \"json_object\",\n        }\n    }\n    \n    headers = {\n        \"Authorization\": f\"Bearer {api_key}\",\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n    }\n    \n    try:\n        # Make the API request\n        response = requests.post(api_url, headers=headers, json=payload)\n        response.raise_for_status()\n        \n        # Extract the response content\n        response_data = response.json()\n        content = response_data[\"choices\"][0][\"message\"][\"content\"]\n        \n        # Extract the JSON array from the response\n        try:\n            # Try to parse the content as JSON directly\n            list_data = json.loads(content)\n            \n            # If list_data is a dictionary with an \"items\" or \"list\" key, use that\n            if isinstance(list_data, dict):\n                if \"items\" in list_data:\n                    list_data = list_data[\"items\"]\n                elif \"list\" in list_data:\n                    list_data = list_data[\"list\"]\n                else:\n                    # Check for any array key in the response\n                    for key, value in list_data.items():\n                        if isinstance(value, list):\n                            list_data = value\n                            break\n            \n            # Convert the list to a 2D list (single column)\n            if isinstance(list_data, list):\n                # Ensure each item is a string and properly formatted as a single-item list\n                result = []\n                for item in list_data:\n                    if isinstance(item, list):\n                        # If item is already a list, ensure it has exactly one element\n                        if len(item) >= 1:\n                            result.append([str(item[0])])\n                        else:\n                            result.append([\"\"])\n                    else:\n                        # If item is not a list, make it a single-item list\n                        result.append([str(item)])\n                return result\n            else:\n                return [[\"Error: Unable to parse response. Expected a list.\"]]\n                \n        except (json.JSONDecodeError, ValueError):\n            # If JSON parsing fails, return an error message as a single cell\n            return [[\"Error: Unable to generate list. The AI response wasn't in the expected format.\"]]\n             \n    except requests.exceptions.RequestException as e:\n        # Handle API request errors\n        return [[\"Error: API request failed.\", str(e)]]",
    "fileId": "6",
    "worksheet": "/**\n * ai_list.js\n * \n * This script demonstrates how to use the AI_LIST function in Excel using the Excel JavaScript API.\n * It creates a workbook with examples of the function in use.\n */\n\nasync function createAiListExample() {\n    try {\n        await Excel.run(async (context) => {\n            // Add a new worksheet for the examples\n            let sheet = context.workbook.worksheets.add(\"AI_LIST Examples\");\n\n            // Format header row\n            let headerRange = sheet.getRange(\"A1:B1\");\n            headerRange.values = [[\"Example\", \"Result\"]];\n            headerRange.format.font.bold = true;\n            headerRange.format.fill.color = \"#D9D9D9\";\n            sheet.getRange(\"A:B\").format.autofitColumns();\n\n            // Example 1: Generating a list of KPIs\n            sheet.getRange(\"A2\").values = [[\"Marketing KPIs\"]];\n            sheet.getRange(\"A3\").values = [[\"=AI_LIST(\\\"List essential marketing KPIs for quarterly performance reviews\\\")\"]];\n\n            // Example 2: Risk Mitigation Strategies\n            sheet.getRange(\"A4\").values = [[\"Risk Mitigation Strategies\"]];\n            sheet.getRange(\"A5\").values = [[\"=AI_LIST(\\\"List effective risk mitigation strategies for enterprise software implementation\\\")\"]];\n\n            // Example 3: Compliance Requirements\n            sheet.getRange(\"A6\").values = [[\"Healthcare Compliance Requirements\"]];\n            sheet.getRange(\"A7\").values = [[\"=AI_LIST(\\\"List key compliance requirements for healthcare organizations\\\")\"]];\n\n            // Example 4: Using values parameter\n            sheet.getRange(\"A8\").values = [[\"Action Items with Context\"]];\n            sheet.getRange(\"D1\").values = [[\"Quarterly Business Review Notes\"]];\n            let reviewNotes = [\n                [\"Q1 revenue fell 5% below target\"],\n                [\"Customer complaints increased by 12%\"],\n                [\"New product launch delayed by 3 weeks\"]\n            ];\n            sheet.getRange(\"D2:D4\").values = reviewNotes;\n            sheet.getRange(\"A9\").values = [[\"=AI_LIST(\\\"List priority action items based on these quarterly business review notes:\\\", D2:D4)\"]];\n\n            // Example 5: SMART Goals with custom parameters\n            sheet.getRange(\"A10\").values = [[\"SMART Goals (Custom Parameters)\"]];\n            sheet.getRange(\"A11\").values = [[\"=AI_LIST(\\\"List 5 SMART goals for an HR department focused on improving employee retention\\\", , 0.2, \\\"mistral-small-2501\\\", 1500)\"]];\n\n            // Add instructions\n            sheet.getRange(\"A13:B13\").merge();\n            sheet.getRange(\"A13\").values = [[\"Note: This function requires an API key and internet connection to work.\"]];\n            sheet.getRange(\"A13\").format.font.italic = true;\n\n            // Autofit for better display\n            sheet.getUsedRange().format.autofitColumns();\n            sheet.getUsedRange().format.autofitRows();\n\n            // Activate the sheet\n            sheet.activate();\n\n            await context.sync();\n        });\n\n        console.log(\"AI_LIST examples workbook created successfully!\");\n    } catch (error) {\n        console.error(\"Error: \" + error);\n    }\n}\n\n// Run the function when the add-in is initialized\nOffice.onReady((info) => {\n    if (info.host === Office.HostType.Excel) {\n        // Register the function to be called from the UI\n        document.getElementById(\"create-examples-button\").onclick = createAiListExample;\n    }\n});\n\n// HTML interface for the Add-in:\n/*\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>AI_LIST Function Examples</title>\n    <script src=\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\" type=\"text/javascript\"></script>\n    <script src=\"ai_list.js\" type=\"text/javascript\"></script>\n    <style>\n        body { font-family: 'Segoe UI', sans-serif; margin: 20px; }\n        button { padding: 10px; background-color: #0078d4; color: white; border: none; border-radius: 4px; cursor: pointer; }\n        button:hover { background-color: #005a9e; }\n    </style>\n</head>\n<body>\n    <h1>AI_LIST Function Examples</h1>\n    <p>Click the button below to create a worksheet with AI_LIST function examples.</p>\n    <button id=\"create-examples-button\">Create Examples</button>\n</body>\n</html>\n*/"
  },
  {
    "name": "ai_summarize",
    "description": "Uses AI to generate a concise summary of the provided text.",
    "code": "import requests\nimport json\n\ndef ai_summarize(text, max_length=\"medium\", format=\"paragraph\", temperature=0.0, model='mistral-small-2501', max_tokens=1000):\n    \"\"\"\n    Uses AI to generate a concise summary of the provided text.\n    \n    Args:\n        text (str or list): The text to summarize (string or 2D list with a single cell)\n        max_length (str or int): Target length for summary (\"short\", \"medium\", \"long\" or word/sentence count)\n        format (str): Output format (\"paragraph\", \"bullets\", \"key_points\")\n        temperature (float, optional): Controls response creativity (0-2). Default is 0\n        model (str, optional): ID of the model to use\n        max_tokens (int, optional): Maximum tokens for response generation. Default is 1000\n        \n    Returns:\n        list: 2D list representing the summary (single cell for paragraph format,\n              single column for bullets or key_points format)\n    \"\"\"\n    # Handle 2D list input (flatten to a single string)\n    if isinstance(text, list):\n        if len(text) > 0 and len(text[0]) > 0:\n            # If it's a 2D range with multiple cells, concatenate the content\n            full_text = []\n            for row in text:\n                for cell in row:\n                    if cell:  # Skip empty cells\n                        full_text.append(str(cell))\n            text = \" \".join(full_text)\n        else:\n            return [[\"Error: Empty input text.\"]]\n    \n    # Validate format\n    valid_formats = [\"paragraph\", \"bullets\", \"key_points\"]\n    if format.lower() not in valid_formats:\n        return [[f\"Error: Invalid format. Choose from {', '.join(valid_formats)}\"]]\n    \n    # Using Boardflare API for demo purposes. Replace with any OpenAI compatible API endpoint.\n    api_url = \"https://llm.boardflare.com\" # replace with \"https://api.mistral.ai/v1/chat/completions\"\n    api_key = \"cV4a59t1wjYGs....\" # replace with your Mistral API key\n    \n    # Construct a specific prompt for summarization\n    length_instruction = \"\"\n    if isinstance(max_length, int):\n        length_instruction = f\"in approximately {max_length} words\"\n    elif isinstance(max_length, str):\n        if max_length.lower() == \"short\":\n            length_instruction = \"in a very concise way, focusing only on the most critical points\"\n        elif max_length.lower() == \"medium\":\n            length_instruction = \"in a moderately detailed way, covering the main points\"\n        elif max_length.lower() == \"long\":\n            length_instruction = \"in a comprehensive way, covering all significant details\"\n        else:\n            # Treat as a word count if it's a numeric string\n            try:\n                word_count = int(max_length)\n                length_instruction = f\"in approximately {word_count} words\"\n            except ValueError:\n                length_instruction = \"in a moderately detailed way\"\n    \n    format_instruction = \"\"\n    if format.lower() == \"paragraph\":\n        format_instruction = \"as a single coherent paragraph\"\n    elif format.lower() == \"bullets\":\n        format_instruction = \"as a bulleted list of key points\"\n    elif format.lower() == \"key_points\":\n        format_instruction = \"as an organized list of key points grouped by categories\"\n    \n    summary_prompt = f\"Summarize the following text {length_instruction} {format_instruction}:\\n\\n{text}\"\n    \n    # Add instruction for structured output\n    if format.lower() == \"paragraph\":\n        summary_prompt += \"\\n\\nReturn ONLY a JSON object with a 'summary' field containing the paragraph summary. \"\n        summary_prompt += \"Do not include any explanatory text, just the JSON object.\"\n    else:  # bullets or key_points\n        summary_prompt += \"\\n\\nReturn ONLY a JSON object with a 'summary_points' field containing an array of summary points. \"\n        summary_prompt += \"Each point should be a string in the array. \"\n        summary_prompt += \"Do not include any explanatory text, just the JSON object.\"\n    \n    # Prepare the API request payload\n    payload = {\n        \"messages\": [{\"role\": \"user\", \"content\": summary_prompt}],\n        \"temperature\": temperature,\n        \"model\": model,\n        \"max_tokens\": max_tokens,\n        \"response_format\": {\n            \"type\": \"json_object\",\n        }\n    }\n    \n    headers = {\n        \"Authorization\": f\"Bearer {api_key}\",\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n    }\n    \n    try:\n        # Make the API request\n        response = requests.post(api_url, headers=headers, json=payload)\n        response.raise_for_status()\n        \n        # Extract the response content\n        response_data = response.json()\n        content = response_data[\"choices\"][0][\"message\"][\"content\"]\n        # print(content)\n        \n        # Extract the summary from the response\n        try:\n            # Try to parse the content as JSON directly\n            summary_data = json.loads(content)\n            \n            if format.lower() == \"paragraph\":\n                # Get the paragraph summary\n                if isinstance(summary_data, dict) and \"summary\" in summary_data:\n                    return [[summary_data[\"summary\"]]]\n                else:\n                    return [[\"Error: Unable to parse response. Expected a JSON object with 'summary' field.\"]]\n            else:  # bullets or key_points\n                # Get the bullet points or key points\n                if isinstance(summary_data, dict) and \"summary_points\" in summary_data:\n                    points = summary_data[\"summary_points\"]\n                    if isinstance(points, list):\n                        return [[point] for point in points]\n                    else:\n                        return [[\"Error: Unable to parse response. Expected an array of summary points.\"]]\n                else:\n                    return [[\"Error: Unable to parse response. Expected a JSON object with 'summary_points' field.\"]]\n                \n        except (json.JSONDecodeError, ValueError):\n            # If JSON parsing fails, return an error message\n            return [[\"Error: Unable to generate summary. The AI response wasn't in the expected format.\"]]\n             \n    except requests.exceptions.RequestException as e:\n        # Handle API request errors\n        return [[f\"Error: API request failed. {str(e)}\"]]",
    "fileId": "7",
    "worksheet": "/**\n * ai_summarize.js\n * \n * This script demonstrates how to use the AI_SUMMARIZE function in Excel using the Excel JavaScript API.\n * It creates a workbook with examples of the function in use.\n */\n\nasync function createAiSummarizeExample() {\n    try {\n        await Excel.run(async (context) => {\n            // Add a new worksheet for the examples\n            let sheet = context.workbook.worksheets.add(\"AI_SUMMARIZE Examples\");\n\n            // Format header row\n            let headerRange = sheet.getRange(\"A1:B1\");\n            headerRange.values = [[\"Example\", \"Result\"]];\n            headerRange.format.font.bold = true;\n            headerRange.format.fill.color = \"#D9D9D9\";\n            sheet.getRange(\"A:B\").format.autofitColumns();\n\n            // Example 1: Summarizing a business report\n            sheet.getRange(\"A2\").values = [[\"Business Report Summary (Paragraph Format)\"]];\n            sheet.getRange(\"D1\").values = [[\"Business Report Text\"]];\n            let businessReport = \"Q1 2025 financial results showed a 12% increase in revenue, reaching $3.4M compared to $3.0M in Q1 2024. \" +\n                \"Operating expenses were reduced by 5% due to successful cost-cutting initiatives in our supply chain operations. \" +\n                \"Profit margins improved from 15% to 18%. The new product line launched in February exceeded expectations with 5,000 units sold, \" +\n                \"accounting for 15% of total sales. Customer acquisition cost decreased by 10% while customer retention improved by 7%. \" +\n                \"The expansion into European markets is progressing ahead of schedule with distribution agreements signed in Germany and France.\";\n            sheet.getRange(\"D2\").values = [[businessReport]];\n            sheet.getRange(\"A3\").values = [[\"=AI_SUMMARIZE(D2, \\\"short\\\", \\\"paragraph\\\")\"]];\n\n            // Example 2: Extracting key points from meeting notes\n            sheet.getRange(\"A4\").values = [[\"Meeting Notes Summary (Bullets Format)\"]];\n            sheet.getRange(\"E1\").values = [[\"Meeting Notes Text\"]];\n            let meetingNotes = \"During today's product development meeting, we discussed several key items. Sarah reported that the user interface \" +\n                \"redesign is 85% complete and should be finalized by next Friday. Michael raised concerns about the database performance under high \" +\n                \"load conditions, estimating we need to optimize queries before proceeding to beta testing. Jennifer presented three alternative \" +\n                \"solutions for the payment processing integration, with the team agreeing to proceed with Option B (Stripe API) due to better \" +\n                \"documentation and support.\";\n            sheet.getRange(\"E2\").values = [[meetingNotes]];\n            sheet.getRange(\"A5\").values = [[\"=AI_SUMMARIZE(E2, 100, \\\"bullets\\\")\"]];\n\n            // Example 3: Customer feedback summary\n            sheet.getRange(\"A6\").values = [[\"Customer Feedback Summary (Key Points Format)\"]];\n            sheet.getRange(\"F1\").values = [[\"Customer Feedback Data\"]];\n            let customerFeedback = \"We collected feedback from 120 customers who used our new software platform over the past month. \" +\n                \"Approximately 65% of users rated the experience as positive (4 or 5 stars), while 25% gave neutral ratings (3 stars) \" +\n                \"and 10% reported negative experiences (1 or 2 stars). The most commonly praised features were the intuitive dashboard, \" +\n                \"fast loading times, and mobile compatibility. Areas of criticism included the complex export process, occasional sync issues, \" +\n                \"and limited customization options.\";\n            sheet.getRange(\"F2\").values = [[customerFeedback]];\n            sheet.getRange(\"A7\").values = [[\"=AI_SUMMARIZE(F2, \\\"medium\\\", \\\"key_points\\\")\"]];\n\n            // Example 4: Contract summary with custom parameters\n            sheet.getRange(\"A8\").values = [[\"Contract Summary (Custom Parameters)\"]];\n            sheet.getRange(\"G1\").values = [[\"Service Level Agreement Text\"]];\n            let slaText = \"This Service Level Agreement (SLA) is effective as of April 1, 2025, between XYZ Corporation ('Provider') \" +\n                \"and ABC Company ('Client') for the provision of cloud hosting services. The Provider guarantees a monthly uptime of 99.9%, \" +\n                \"calculated on a 24/7 basis, excluding scheduled maintenance windows. In the event of downtime exceeding the guaranteed level, \" +\n                \"the Provider will issue service credits as follows: 5% of monthly fee for uptime between 99.0% and 99.8%, 10% for uptime \" +\n                \"between 98.0% and 98.9%, and 20% for uptime below 98.0%.\";\n            sheet.getRange(\"G2\").values = [[slaText]];\n            sheet.getRange(\"A9\").values = [[\"=AI_SUMMARIZE(G2, \\\"medium\\\", \\\"key_points\\\", 0.1, \\\"mistral-small-2501\\\", 1200)\"]];\n\n            // Add instructions\n            sheet.getRange(\"A11:B11\").merge();\n            sheet.getRange(\"A11\").values = [[\"Note: This function requires an API key and internet connection to work.\"]];\n            sheet.getRange(\"A11\").format.font.italic = true;\n\n            // Autofit for better display\n            sheet.getUsedRange().format.autofitColumns();\n            sheet.getUsedRange().format.autofitRows();\n\n            // Activate the sheet\n            sheet.activate();\n\n            await context.sync();\n        });\n\n        console.log(\"AI_SUMMARIZE examples workbook created successfully!\");\n    } catch (error) {\n        console.error(\"Error: \" + error);\n    }\n}\n\n// Run the function when the add-in is initialized\nOffice.onReady((info) => {\n    if (info.host === Office.HostType.Excel) {\n        // Register the function to be called from the UI\n        document.getElementById(\"create-examples-button\").onclick = createAiSummarizeExample;\n    }\n});\n\n// HTML interface for the Add-in:\n/*\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>AI_SUMMARIZE Function Examples</title>\n    <script src=\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\" type=\"text/javascript\"></script>\n    <script src=\"ai_summarize.js\" type=\"text/javascript\"></script>\n    <style>\n        body { font-family: 'Segoe UI', sans-serif; margin: 20px; }\n        button { padding: 10px; background-color: #0078d4; color: white; border: none; border-radius: 4px; cursor: pointer; }\n        button:hover { background-color: #005a9e; }\n    </style>\n</head>\n<body>\n    <h1>AI_SUMMARIZE Function Examples</h1>\n    <p>Click the button below to create a worksheet with AI_SUMMARIZE function examples.</p>\n    <button id=\"create-examples-button\">Create Examples</button>\n</body>\n</html>\n*/"
  },
  {
    "name": "ai_table",
    "description": "Uses AI to generate a structured table based on the prompt and optional header/source data.",
    "code": "import requests\nimport json\n\ndef ai_table(prompt, header=None, source=None, temperature=0.0, model='mistral-small-2501', max_tokens=1500):\n    \"\"\"\n    Uses AI to generate a structured table based on the prompt and optional header/source data.\n    \n    Args:\n        prompt (str): Instruction for AI to create a table\n        header (list, optional): 2D list containing table header (column names)\n        source (list, optional): 2D list containing source data used to create the table\n        temperature (float, optional): Controls response creativity (0-2). Default is 0\n        model (str, optional): ID of the model to use\n        max_tokens (int, optional): Maximum tokens for response generation. Default is 1500\n        \n    Returns:\n        list: 2D list representing the generated table data\n    \"\"\"\n    # Using Boardflare API for demo purposes. Replace with any OpenAI compatible API endpoint.\n    api_url = \"https://llm.boardflare.com\" # replace with \"https://api.mistral.ai/v1/chat/completions\"\n    api_key = \"cV4a59t1wjYGs....\" # replace with your Mistral API key\n    \n    # Construct a specific prompt for table generation\n    table_prompt = f\"Generate a well-organized table based on this request: {prompt}\"\n    \n    # Add header information if provided\n    if header is not None:\n        # Assuming header is a 2D list with a single row for column names\n        if header and len(header) > 0:\n            header_str = \", \".join(str(col) for col in header[0])\n            table_prompt += f\"\\nUse exactly these columns: {header_str}\"\n    \n    # Add source data information if provided\n    if source is not None:\n        source_str = json.dumps(source, indent=2)\n        table_prompt += f\"\\n\\nUse this source data to create the table:\\n{source_str}\"\n    \n    # Add instruction for structured output\n    table_prompt += \"\\nReturn ONLY a JSON array of arrays (2D array) with the table data. \"\n    table_prompt += \"The first row should contain column headers if not provided. \"\n    table_prompt += \"Each subsequent row should contain data that fits the columns. \"\n    table_prompt += \"Do not include any explanatory text, just the JSON array.\"\n    \n    # Prepare the API request payload\n    payload = {\n        \"messages\": [{\"role\": \"user\", \"content\": table_prompt}],\n        \"temperature\": temperature,\n        \"model\": model,\n        \"max_tokens\": max_tokens,\n        \"response_format\": {\n            \"type\": \"json_object\",\n        }\n    }\n    \n    headers = {\n        \"Authorization\": f\"Bearer {api_key}\",\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n    }\n    \n    try:\n        # Make the API request\n        response = requests.post(api_url, headers=headers, json=payload)\n        response.raise_for_status()\n        \n        # Extract the response content\n        response_data = response.json()\n        content = response_data[\"choices\"][0][\"message\"][\"content\"]\n        \n        # Extract the JSON array from the response\n        try:\n            # Try to parse the content as JSON directly\n            table_data = json.loads(content)\n            return table_data\n        except (json.JSONDecodeError, ValueError):\n            # If JSON parsing fails, return an error message as a single cell\n            return [[\"Error: Unable to generate table. The AI response wasn't in the expected format.\"]]\n             \n    except Exception as e:\n        # Handle any exception, including API request errors\n        return [[\"Error: API request failed.\", str(e)]]",
    "fileId": "8",
    "worksheet": "/**\n * ai_table.js\n * \n * This script demonstrates how to use the AI_TABLE function in Excel using the Excel JavaScript API.\n * It creates a workbook with examples of the function in use.\n */\n\nasync function createAITableExample() {\n    try {\n        await Excel.run(async (context) => {\n            // Add a new worksheet for the examples\n            let sheet = context.workbook.worksheets.add(\"AI_TABLE Examples\");\n\n            // Setup for the first example - basic table generation\n            sheet.getRange(\"A1:E1\").merge();\n            sheet.getRange(\"A1\").values = [[\"Example 1: Basic Table Generation\"]];\n            sheet.getRange(\"A1\").format.font.bold = true;\n            sheet.getRange(\"A1\").format.fill.color = \"#4472C4\";\n            sheet.getRange(\"A1\").format.font.color = \"white\";\n\n            // Description for Example 1\n            sheet.getRange(\"A2:E2\").merge();\n            sheet.getRange(\"A2\").values = [[\"Generate a simple table listing smartphone features\"]];\n            sheet.getRange(\"A2\").format.font.italic = true;\n\n            // Basic example formula\n            sheet.getRange(\"A3:E3\").merge();\n            sheet.getRange(\"A3\").values = [[\"=AI_TABLE(\\\"Create a table listing the features of different smartphones including brand, model, camera quality, battery life.\\\")\"]];\n\n            // Create a separator\n            sheet.getRange(\"A5:E5\").merge();\n            sheet.getRange(\"A5\").values = [[\"\"]];\n\n            // Setup for the second example - with specific header\n            sheet.getRange(\"A7:E7\").merge();\n            sheet.getRange(\"A7\").values = [[\"Example 2: Using a Specific Header\"]];\n            sheet.getRange(\"A7\").format.font.bold = true;\n            sheet.getRange(\"A7\").format.fill.color = \"#4472C4\";\n            sheet.getRange(\"A7\").format.font.color = \"white\";\n\n            // Description for Example 2\n            sheet.getRange(\"A8:E8\").merge();\n            sheet.getRange(\"A8\").values = [[\"Generate a table of tourist destinations using a predefined header\"]];\n            sheet.getRange(\"A8\").format.font.italic = true;\n\n            // Create header data for Example 2\n            sheet.getRange(\"A10:D10\").values = [[\"Country\", \"Popular Attractions\", \"Best Time to Visit\", \"Average Cost\"]];\n            sheet.getRange(\"A10:D10\").format.font.bold = true;\n            sheet.getRange(\"A10:D10\").format.fill.color = \"#D9D9D9\";\n\n            // Example 2 formula (using the header above)\n            sheet.getRange(\"A12:E12\").merge();\n            sheet.getRange(\"A12\").values = [[\"=AI_TABLE(\\\"Generate a table of top 5 tourist destinations.\\\", A10:D10)\"]];\n\n            // Create a separator\n            sheet.getRange(\"A15:E15\").merge();\n            sheet.getRange(\"A15\").values = [[\"\"]];\n\n            // Setup for the third example - with source data\n            sheet.getRange(\"A17:E17\").merge();\n            sheet.getRange(\"A17\").values = [[\"Example 3: Using Source Data for Summarization\"]];\n            sheet.getRange(\"A17\").format.font.bold = true;\n            sheet.getRange(\"A17\").format.fill.color = \"#4472C4\";\n            sheet.getRange(\"A17\").format.font.color = \"white\";\n\n            // Description for Example 3\n            sheet.getRange(\"A18:E18\").merge();\n            sheet.getRange(\"A18\").values = [[\"Generate a table summarizing product sales based on provided source data\"]];\n            sheet.getRange(\"A18\").format.font.italic = true;\n\n            // Create sample data for Example 3\n            let sampleData = [\n                [\"Product\", \"Category\", \"Sales Amount\"],\n                [\"Laptop\", \"Tech\", 1200],\n                [\"Mouse\", \"Tech\", 25],\n                [\"Keyboard\", \"Tech\", 75],\n                [\"T-Shirt\", \"Apparel\", 20],\n                [\"Jeans\", \"Apparel\", 50],\n                [\"Laptop\", \"Tech\", 1350],\n                [\"Hoodie\", \"Apparel\", 45]\n            ];\n\n            sheet.getRange(\"A20:C27\").values = sampleData;\n            sheet.getRange(\"A20:C20\").format.font.bold = true;\n            sheet.getRange(\"A20:C20\").format.fill.color = \"#D9D9D9\";\n\n            // Example 3 formula (using the sample data)\n            sheet.getRange(\"A29:E29\").merge();\n            sheet.getRange(\"A29\").values = [[\"=AI_TABLE(\\\"Summarize the sales data by product category.\\\", , A20:C27)\"]];\n\n            // Create a separator\n            sheet.getRange(\"A32:E32\").merge();\n            sheet.getRange(\"A32\").values = [[\"\"]];\n\n            // Setup for the fourth example - extracting entities from text\n            sheet.getRange(\"A34:E34\").merge();\n            sheet.getRange(\"A34\").values = [[\"Example 4: Extracting Entities from Text\"]];\n            sheet.getRange(\"A34\").format.font.bold = true;\n            sheet.getRange(\"A34\").format.fill.color = \"#4472C4\";\n            sheet.getRange(\"A34\").format.font.color = \"white\";\n\n            // Description for Example 4\n            sheet.getRange(\"A35:E35\").merge();\n            sheet.getRange(\"A35\").values = [[\"Extract company names and their locations from a block of text\"]];\n            sheet.getRange(\"A35\").format.font.italic = true;\n\n            // Create sample text for Example 4\n            sheet.getRange(\"A37:E37\").merge();\n            sheet.getRange(\"A37\").values = [[\"Innovate Corp, headquartered in Silicon Valley, announced a partnership with Global Solutions Ltd. based in London. Meanwhile, Tech Pioneers Inc. from Austin is expanding its operations to Berlin.\"]];\n            sheet.getRange(\"A37\").format.wrapText = true;\n\n            // Example 4 formula (using the sample text)\n            sheet.getRange(\"A39:E39\").merge();\n            sheet.getRange(\"A39\").values = [[\"=AI_TABLE(\\\"Extract all company names and their primary locations mentioned in the text.\\\", , A37)\"]];\n\n            // Add note about API key\n            sheet.getRange(\"A41:E42\").merge();\n            sheet.getRange(\"A41\").values = [[\"Note: This function requires an API key for an AI service. Replace the placeholder API key in the code with your own key before using.\"]];\n            sheet.getRange(\"A41\").format.font.italic = true;\n            sheet.getRange(\"A41\").format.font.color = \"red\";\n\n            // Format for better display\n            sheet.getUsedRange().format.autofitColumns();\n            sheet.getUsedRange().format.autofitRows();\n\n            // Activate the sheet\n            sheet.activate();\n\n            await context.sync();\n        });\n\n        console.log(\"AI_TABLE examples workbook created successfully!\");\n    } catch (error) {\n        console.error(\"Error: \" + error);\n    }\n}\n\n// Run the function when the add-in is initialized\nOffice.onReady((info) => {\n    if (info.host === Office.HostType.Excel) {\n        // Register the function to be called from the UI\n        document.getElementById(\"create-examples-button\").onclick = createAITableExample;\n    }\n});\n\n// HTML interface for the Add-in:\n/*\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>AI_TABLE Function Examples</title>\n    <script src=\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\" type=\"text/javascript\"></script>\n    <script src=\"ai_table.js\" type=\"text/javascript\"></script>\n    <style>\n        body { font-family: 'Segoe UI', sans-serif; margin: 20px; }\n        button { padding: 10px; background-color: #0078d4; color: white; border: none; border-radius: 4px; cursor: pointer; }\n        button:hover { background-color: #005a9e; }\n    </style>\n</head>\n<body>\n    <h1>AI_TABLE Function Examples</h1>\n    <p>Click the button below to create a worksheet with AI_TABLE function examples.</p>\n    <button id=\"create-examples-button\">Create Examples</button>\n</body>\n</html>\n*/"
  },
  {
    "name": "text_distance",
    "description": "Calculate text similarity scores between needle(s) and haystack items.",
    "code": "import textdistance\n\ndef text_distance(needle, haystack, algorithm='jaccard', top_n=1):\n    \"\"\"Calculate text similarity scores between needle(s) and haystack items.\n    \n    Args:\n        needle: String or 2D list of strings to search for\n        haystack: 2D list of strings to search within\n        algorithm (str): Algorithm name from textdistance library (default: 'jaccard')\n        top_n (int): Number of top matches to return (default: 1).\n    \n    Returns:\n        list: 2D list where each inner list contains the top N matches as [position, score] pairs.\n    \"\"\"\n    # Get the algorithm function from textdistance\n    algo_func = getattr(textdistance, algorithm)\n    \n    # Handle needle as either string or 2D list\n    needle_flat = []\n    if isinstance(needle, str):\n        needle_flat = [needle] if needle.strip() else []\n    else:\n        # Flatten 2D lists and filter out None values\n        needle_flat = [item for sublist in needle for item in sublist if item is not None]\n    \n    # Flatten haystack 2D list\n    haystack_flat = [item for sublist in haystack for item in sublist if item is not None]\n    \n    if not haystack_flat:\n        return [[] for _ in needle_flat] # Return empty lists if haystack is empty\n        \n    results = []\n    for needle_item in needle_flat:\n        if not str(needle_item).strip():\n            results.append([])  # Handle empty needle values by returning an empty list for that needle\n            continue\n            \n        # Calculate similarity scores with normalization and round to 2 decimal places\n        # Adjust index to be 1-based\n        scores = [(index + 1, round(algo_func.normalized_similarity(str(needle_item), str(item)), 2)) \n                 for index, item in enumerate(haystack_flat)]\n        # Sort based on scores in descending order\n        scores.sort(key=lambda x: x[1], reverse=True)\n        # Get the top N matches (index and score)\n        top_matches = [list(score) for score in scores[:top_n]]\n        results.append(top_matches)\n\n    return results",
    "fileId": "9",
    "worksheet": "/**\n * text_distance.js\n * \n * This script demonstrates how to use the TEXT_DISTANCE function in Excel using the Excel JavaScript API.\n * It creates a workbook with examples of the function in use.\n */\n\nasync function createTextDistanceExample() {\n    try {\n        await Excel.run(async (context) => {\n            // Add a new worksheet for the examples\n            let sheet = context.workbook.worksheets.add(\"TEXT_DISTANCE Examples\");\n\n            // Create a section for the search data\n            sheet.getRange(\"A1:C1\").merge();\n            sheet.getRange(\"A1\").values = [[\"Search Data (Haystack)\"]];\n            sheet.getRange(\"A1\").format.font.bold = true;\n            sheet.getRange(\"A1\").format.fill.color = \"#4472C4\";\n            sheet.getRange(\"A1\").format.font.color = \"white\";\n\n            // Add the search data\n            let searchData = [\n                [\"Product Name\"],\n                [\"Ergonomic Office Chair\"],\n                [\"Wireless Bluetooth Headphones\"],\n                [\"Ultra HD Smart TV 55-inch\"],\n                [\"Stainless Steel Kitchen Knife Set\"],\n                [\"Portable Bluetooth Speaker\"],\n                [\"Wireless Gaming Mouse\"],\n                [\"Digital Smart Watch\"],\n                [\"Professional Hair Dryer\"],\n                [\"Home Air Purifier\"],\n                [\"Cordless Vacuum Cleaner\"]\n            ];\n\n            // Apply search data to sheet\n            sheet.getRange(\"A2:A12\").values = searchData;\n            sheet.getRange(\"A2:A12\").format.font.bold = true;\n            sheet.getRange(\"A2\").format.fill.color = \"#D9D9D9\";\n\n            // Create a section for examples\n            sheet.getRange(\"C1:G1\").merge();\n            sheet.getRange(\"C1\").values = [[\"Examples of TEXT_DISTANCE Function\"]];\n            sheet.getRange(\"C1\").format.font.bold = true;\n            sheet.getRange(\"C1\").format.fill.color = \"#4472C4\";\n            sheet.getRange(\"C1\").format.font.color = \"white\";\n\n            // Example 1: Basic usage with Jaccard algorithm (default)\n            sheet.getRange(\"C3:F3\").merge();\n            sheet.getRange(\"C3\").values = [[\"Example 1: Basic search with Jaccard algorithm (default)\"]];\n            sheet.getRange(\"C3\").format.font.bold = true;\n            sheet.getRange(\"C3\").format.fill.color = \"#D9D9D9\";\n\n            sheet.getRange(\"C4:D4\").values = [[\"Search Term\", \"Result (Index & Score)\"]];\n            sheet.getRange(\"C4:D4\").format.font.bold = true;\n            sheet.getRange(\"C5\").values = [[\"bluetooth speakers\"]];\n            sheet.getRange(\"D5\").formulas = [[\"=TEXT_DISTANCE(C5, A3:A12)\"]];\n\n            // Example 2: Multiple matches with Jaro-Winkler\n            sheet.getRange(\"C7:F7\").merge();\n            sheet.getRange(\"C7\").values = [[\"Example 2: Multiple matches with Jaro-Winkler algorithm\"]];\n            sheet.getRange(\"C7\").format.font.bold = true;\n            sheet.getRange(\"C7\").format.fill.color = \"#D9D9D9\";\n\n            sheet.getRange(\"C8:D8\").values = [[\"Search Term\", \"Top 3 Results (Index & Score)\"]];\n            sheet.getRange(\"C8:D8\").format.font.bold = true;\n            sheet.getRange(\"C9\").values = [[\"wireless mouse\"]];\n            sheet.getRange(\"D9\").formulas = [[\"=TEXT_DISTANCE(C9, A3:A12, \\\"jaro_winkler\\\", 3)\"]];\n\n            // Example 3: Comparing different algorithms\n            sheet.getRange(\"C11:F11\").merge();\n            sheet.getRange(\"C11\").values = [[\"Example 3: Comparing Different Algorithms\"]];\n            sheet.getRange(\"C11\").format.font.bold = true;\n            sheet.getRange(\"C11\").format.fill.color = \"#D9D9D9\";\n\n            sheet.getRange(\"C12:F12\").values = [[\"Search Term\", \"Levenshtein\", \"Cosine\", \"Jaccard\"]];\n            sheet.getRange(\"C12:F12\").format.font.bold = true;\n            sheet.getRange(\"C13\").values = [[\"smart tv\"]];\n            sheet.getRange(\"D13\").formulas = [[\"=TEXT_DISTANCE(C13, A3:A12, \\\"levenshtein\\\")\"]];\n            sheet.getRange(\"E13\").formulas = [[\"=TEXT_DISTANCE(C13, A3:A12, \\\"cosine\\\")\"]];\n            sheet.getRange(\"F13\").formulas = [[\"=TEXT_DISTANCE(C13, A3:A12, \\\"jaccard\\\")\"]];\n\n            // Example 4: Multiple search terms at once\n            sheet.getRange(\"C15:F15\").merge();\n            sheet.getRange(\"C15\").values = [[\"Example 4: Multiple Search Terms at Once\"]];\n            sheet.getRange(\"C15\").format.font.bold = true;\n            sheet.getRange(\"C15\").format.fill.color = \"#D9D9D9\";\n\n            sheet.getRange(\"C16:E16\").values = [[\"Search Terms\", \"Algorithm\", \"Results\"]];\n            sheet.getRange(\"C16:E16\").format.font.bold = true;\n\n            // Create a 2D array with multiple search terms\n            sheet.getRange(\"C17:C19\").values = [[\"kitchen\"], [\"wireless\"], [\"cordless\"]];\n            sheet.getRange(\"D17:D19\").values = [[\"dice\"], [\"cosine\"], [\"jaccard\"]];\n\n            // Use TRANSPOSE to display multiple search term results\n            sheet.getRange(\"E17\").formulas = [[\"=TEXT_DISTANCE(C17:C19, A3:A12, D17:D19, 1)\"]];\n\n            // Add explanation of function\n            sheet.getRange(\"A14:A19\").merge();\n            sheet.getRange(\"A14\").values = [[\n                \"About TEXT_DISTANCE:\\n\\n\" +\n                \"This function compares strings using various text similarity algorithms.\\n\\n\" +\n                \"\u2022 The first parameter is what you're searching for\\n\" +\n                \"\u2022 The second parameter is where to search\\n\" +\n                \"\u2022 The third parameter is the algorithm to use\\n\" +\n                \"\u2022 The fourth parameter is how many matches to return\\n\\n\" +\n                \"Results show [position, score] where score is between 0-1 (higher = more similar)\"\n            ]];\n            sheet.getRange(\"A14\").format.wrapText = true;\n\n            // Format and autofit\n            sheet.getUsedRange().format.autofitColumns();\n            sheet.getUsedRange().format.autofitRows();\n            sheet.getRange(\"A:F\").format.horizontalAlignment = \"left\";\n\n            // Activate the sheet\n            sheet.activate();\n\n            await context.sync();\n        });\n\n        console.log(\"TEXT_DISTANCE examples workbook created successfully!\");\n    } catch (error) {\n        console.error(\"Error: \" + error);\n    }\n}\n\n// Run the function when the add-in is initialized\nOffice.onReady((info) => {\n    if (info.host === Office.HostType.Excel) {\n        // Register the function to be called from the UI\n        document.getElementById(\"create-examples-button\").onclick = createTextDistanceExample;\n    }\n});\n\n// HTML interface for the Add-in:\n/*\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>TEXT_DISTANCE Function Examples</title>\n    <script src=\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\" type=\"text/javascript\"></script>\n    <script src=\"text_distance.js\" type=\"text/javascript\"></script>\n    <style>\n        body { font-family: 'Segoe UI', sans-serif; margin: 20px; }\n        button { padding: 10px; background-color: #0078d4; color: white; border: none; border-radius: 4px; cursor: pointer; }\n        button:hover { background-color: #005a9e; }\n    </style>\n</head>\n<body>\n    <h1>TEXT_DISTANCE Function Examples</h1>\n    <p>Click the button below to create a worksheet with TEXT_DISTANCE function examples.</p>\n    <button id=\"create-examples-button\">Create Examples</button>\n</body>\n</html>\n*/"
  },
  {
    "name": "vader_sentiment",
    "description": "Analyzes sentiment of text using VADER.",
    "code": "import nltk\nfrom nltk.sentiment import SentimentIntensityAnalyzer\n\n# Ensure you have downloaded the necessary NLTK data\ntry:\n    nltk.data.find('sentiment/vader_lexicon.zip')\nexcept nltk.downloader.DownloadError:\n    nltk.download('vader_lexicon')\n\ndef vader_sentiment(text):\n    \"\"\"Analyzes sentiment of text using VADER.\n    Args:\n        text (str): Text to analyze\n    Returns:\n        float: Compound sentiment score (-1 to 1)\n    \"\"\"\n    if not isinstance(text, str):\n        return 0.0 # Return neutral for non-string input\n    sia = SentimentIntensityAnalyzer()\n    sentiment = sia.polarity_scores(text)\n    return round(sentiment['compound'], 4) # Round for consistency",
    "fileId": "10",
    "worksheet": "/**\n * vader_sentiment.js\n * \n * This script demonstrates how to use the VADER_SENTIMENT function in Excel using the Excel JavaScript API.\n * It creates a workbook with examples of the function in use.\n */\n\nasync function createVaderSentimentExample() {\n    try {\n        await Excel.run(async (context) => {\n            // Add a new worksheet for the examples\n            let sheet = context.workbook.worksheets.add(\"VADER_SENTIMENT Examples\");\n\n            // Format header row\n            let headerRange = sheet.getRange(\"A1:C1\");\n            headerRange.values = [[\"Text\", \"Sentiment Score\", \"Interpretation\"]];\n            headerRange.format.font.bold = true;\n            headerRange.format.fill.color = \"#D9D9D9\";\n            sheet.getRange(\"A:C\").format.autofitColumns();\n\n            // Example texts with varying sentiment\n            const examples = [\n                \"I love this product!\",\n                \"This is terrible.\",\n                \"The weather is nice today.\",\n                \"I am so angry right now!\",\n                \"This seems neutral.\",\n                \"The service was surprisingly good.\",\n                \"Not bad, but could be better.\",\n                \"This is the best day ever!\",\n                \"I hate waiting in line :(\",\n                \"The movie was WONDERFUL!!!\",\n                \"It wasn't terrible.\"\n            ];\n\n            // Add each example to the worksheet\n            for (let i = 0; i < examples.length; i++) {\n                const row = i + 2; // Start from row 2 (after headers)\n\n                // Text column\n                sheet.getRange(`A${row}`).values = [[examples[i]]];\n\n                // Sentiment score column (VADER_SENTIMENT function)\n                sheet.getRange(`B${row}`).formulas = [[`=VADER_SENTIMENT(A${row})`]];\n\n                // Interpretation column (nested IF)\n                sheet.getRange(`C${row}`).formulas = [[\n                    `=IF(B${row}>0.5, \"Very Positive\", \n                      IF(B${row}>0.05, \"Positive\", \n                       IF(B${row}<-0.5, \"Very Negative\", \n                        IF(B${row}<-0.05, \"Negative\", \"Neutral\"))))`\n                ]];\n            }\n\n            // Add conditional formatting for the sentiment scores\n            let scoresRange = sheet.getRange(`B2:B${examples.length + 1}`);\n\n            // Positive scores - green\n            let positiveRule = scoresRange.conditionalFormats.add(Excel.ConditionalFormatType.colorScale);\n            let greenScale = positiveRule.colorScale.criteria;\n            greenScale.minimum.formula = \"-1\";\n            greenScale.minimum.color = \"#FF6666\"; // Red for negative\n            greenScale.midpoint.formula = \"0\";\n            greenScale.midpoint.color = \"#FFFFFF\"; // White for neutral\n            greenScale.maximum.formula = \"1\";\n            greenScale.maximum.color = \"#66FF66\"; // Green for positive\n\n            // Autofit columns for better display\n            sheet.getUsedRange().format.autofitColumns();\n\n            // Add explanation\n            let explanationRange = sheet.getRange(`A${examples.length + 3}:C${examples.length + 6}`);\n            explanationRange.merge();\n            explanationRange.values = [[\n                \"VADER Sentiment Analysis Guide:\\n\" +\n                \"\u2022 Scores close to 1: Strong positive sentiment\\n\" +\n                \"\u2022 Scores close to -1: Strong negative sentiment\\n\" +\n                \"\u2022 Scores near 0: Neutral sentiment\\n\" +\n                \"Note: VADER is particularly effective for social media text and can recognize emoticons, emphasis (ALL CAPS), and negation.\"\n            ]];\n            explanationRange.format.wrapText = true;\n\n            // Activate the sheet\n            sheet.activate();\n\n            await context.sync();\n        });\n\n        console.log(\"VADER_SENTIMENT examples workbook created successfully!\");\n    } catch (error) {\n        console.error(\"Error: \" + error);\n    }\n}\n\n// Run the function when the add-in is initialized\nOffice.onReady((info) => {\n    if (info.host === Office.HostType.Excel) {\n        // Register the function to be called from the UI\n        document.getElementById(\"create-examples-button\").onclick = createVaderSentimentExample;\n    }\n});\n\n// HTML interface for the Add-in:\n/*\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>VADER_SENTIMENT Function Examples</title>\n    <script src=\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\" type=\"text/javascript\"></script>\n    <script src=\"vader_sentiment.js\" type=\"text/javascript\"></script>\n    <style>\n        body { font-family: 'Segoe UI', sans-serif; margin: 20px; }\n        button { padding: 10px; background-color: #0078d4; color: white; border: none; border-radius: 4px; cursor: pointer; }\n        button:hover { background-color: #005a9e; }\n    </style>\n</head>\n<body>\n    <h1>VADER_SENTIMENT Function Examples</h1>\n    <p>Click the button below to create a worksheet with VADER_SENTIMENT function examples.</p>\n    <button id=\"create-examples-button\">Create Examples</button>\n</body>\n</html>\n*/"
  },
  {
    "name": "web_content",
    "description": "Returns web page content in markdown format using Jina.  Useful as a starting point for extraction, summarization, etc.",
    "code": "import requests\n\ndef web_content(url):\n    \"\"\"\n    Returns web page content in markdown format using Jina.  Useful as a starting point for extraction, summarization, etc.\n\n    Args:\n        url (str): The full URL to fetch.\n\n    Returns:\n        str: The content of the response from the URL.\n    \"\"\"\n    headers = {\n        \"X-Retain-Images\": \"none\"\n    }\n    base_url = \"https://r.jina.ai/\"\n    full_url = base_url + url\n    response = requests.get(full_url, headers=headers)\n    response.raise_for_status()\n    # Extract content after 'Markdown Content:' marker\n    try:\n        content = response.text.split(\"Markdown Content:\")[1]\n    except IndexError:\n        # Handle cases where the marker might not be present\n        content = response.text \n    return content.strip() # Strip leading/trailing whitespace",
    "fileId": "11",
    "worksheet": "/**\n * web_content.js\n * \n * This script demonstrates how to use the WEB_CONTENT function in Excel using the Excel JavaScript API.\n * It creates a workbook with examples of the function in use.\n */\n\nasync function createWebContentExample() {\n    try {\n        await Excel.run(async (context) => {\n            // Add a new worksheet for the examples\n            let sheet = context.workbook.worksheets.add(\"WEB_CONTENT Examples\");\n\n            // Format header row\n            let headerRange = sheet.getRange(\"A1:B1\");\n            headerRange.values = [[\"Example\", \"Result\"]];\n            headerRange.format.font.bold = true;\n            headerRange.format.fill.color = \"#D9D9D9\";\n            sheet.getRange(\"A:B\").format.autofitColumns();\n\n            // Example 1: Basic web content retrieval\n            sheet.getRange(\"A2\").values = [[\"Basic Web Content\"]];\n            sheet.getRange(\"A3\").values = [[\"=WEB_CONTENT(\\\"https://www.ycombinator.com/companies/airbnb\\\")\"]];\n\n            // Example 2: Wikipedia article\n            sheet.getRange(\"A4\").values = [[\"Wikipedia Article\"]];\n            sheet.getRange(\"A5\").values = [[\"=WEB_CONTENT(\\\"https://en.wikipedia.org/wiki/Artificial_intelligence\\\")\"]];\n\n            // Example 3: Technical documentation\n            sheet.getRange(\"A6\").values = [[\"Technical Documentation\"]];\n            sheet.getRange(\"A7\").values = [[\"=WEB_CONTENT(\\\"https://docs.python.org/3/tutorial/index.html\\\")\"]];\n\n            // Example 4: News article\n            sheet.getRange(\"A8\").values = [[\"News Article\"]];\n            sheet.getRange(\"A9\").values = [[\"=WEB_CONTENT(\\\"https://techcrunch.com/\\\")\"]];\n\n            // Add instructions\n            sheet.getRange(\"A11:B11\").merge();\n            sheet.getRange(\"A11\").values = [[\"Note: This function requires an internet connection to work.\"]];\n            sheet.getRange(\"A11\").format.font.italic = true;\n\n            // Autofit for better display\n            sheet.getUsedRange().format.autofitColumns();\n            sheet.getUsedRange().format.autofitRows();\n\n            // Activate the sheet\n            sheet.activate();\n\n            await context.sync();\n        });\n\n        console.log(\"WEB_CONTENT examples workbook created successfully!\");\n    } catch (error) {\n        console.error(\"Error: \" + error);\n    }\n}\n\n// Run the function when the add-in is initialized\nOffice.onReady((info) => {\n    if (info.host === Office.HostType.Excel) {\n        // Register the function to be called from the UI\n        document.getElementById(\"create-examples-button\").onclick = createWebContentExample;\n    }\n});\n\n// HTML interface for the Add-in:\n/*\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>WEB_CONTENT Function Examples</title>\n    <script src=\"https://appsforoffice.microsoft.com/lib/1/hosted/office.js\" type=\"text/javascript\"></script>\n    <script src=\"web_content.js\" type=\"text/javascript\"></script>\n    <style>\n        body { font-family: 'Segoe UI', sans-serif; margin: 20px; }\n        button { padding: 10px; background-color: #0078d4; color: white; border: none; border-radius: 4px; cursor: pointer; }\n        button:hover { background-color: #005a9e; }\n    </style>\n</head>\n<body>\n    <h1>WEB_CONTENT Function Examples</h1>\n    <p>Click the button below to create a worksheet with WEB_CONTENT function examples.</p>\n    <button id=\"create-examples-button\">Create Examples</button>\n</body>\n</html>\n*/"
  }
]