[
  {
    "name": "calculate_area",
    "signature": "CALCULATE_AREA(length, [width])",
    "description": "Calculate area of rectangle",
    "resultLine": "\n\nresult = calculate_area(**{k: v for k, v in [(\"length\", arg1 if arg1 != \"__OMITTED__\" else None), (\"width\", arg2 if arg2 != \"__OMITTED__\" else None)] if v is not None})",
    "formula": "=LAMBDA(length, [width], PREVIEW.EXEC(\"workbook-settings:calculate_area\", length, IF(ISOMITTED(width), \"__OMITTED__\", width)))",
    "timestamp": "2025-02-25T02:52:55.584Z",
    "uid": "anonymous",
    "excelExample": "=CALCULATE_AREA(5, 4)",
    "code": "def calculate_area(length, width=5):\n    \"\"\"Calculate area of rectangle.\n    Args:\n        length (float): Length of rectangle\n        width (float): Width of rectangle\n    Returns:\n        float: Area of rectangle\n    \"\"\"\n    return length * width\n\ntest_cases = [\n    [5, 4],      # -> 20\n    [2.5, 4],    # -> 10\n    [10, 10],    # -> 100\n    [1, 1],      # -> 1\n    [0.5, 2]     # -> 1\n]\n\n# Excel usage: =CALCULATE_AREA(5, 4)",
    "fileName": "calculate_area.ipynb",
    "fileId": "2"
  },
  {
    "name": "add_two_days",
    "signature": "ADD_TWO_DAYS(date_input)",
    "description": "Add two days to the given date",
    "resultLine": "\n\nresult = add_two_days(**{k: v for k, v in [(\"date_input\", arg1 if arg1 != \"__OMITTED__\" else None)] if v is not None})",
    "formula": "=LAMBDA(date_input, LOCAL.EXEC(\"workbook-settings:add_two_days\", date_input))",
    "timestamp": "2025-03-03T17:00:59.386Z",
    "uid": "anonymous",
    "excelExample": "=ADD_TWO_DAYS(43831)",
    "parameters": [
      {
        "name": "date_input"
      }
    ],
    "code": "def add_two_days(date_input):\n    \"\"\"Add two days to the given date.\n    Args:\n        date_input (str or int): Date in 'YYYY-MM-DD' format or Excel serial date\n    Returns:\n        str: New date in 'YYYY-MM-DD' format\n    \"\"\"\n    from datetime import datetime, timedelta\n    \n    if isinstance(date_input, int):\n        # Excel serial date to datetime conversion\n        date = datetime(1899, 12, 30) + timedelta(days=date_input)\n    else:\n        date = datetime.strptime(date_input, '%Y-%m-%d')\n    \n    new_date = date + timedelta(days=2)\n    return new_date.strftime('%Y-%m-%d')\n\ntest_cases = [\n    [43831],\n    [44561],\n    ['2024-06-15'],\n    ['2025-01-01']\n]\n\n# Excel usage: =ADD_TWO_DAYS(43831)",
    "fileName": "add_two_days.ipynb",
    "fileId": "7"
  },
  {
    "name": "in_range",
    "signature": "IN_RANGE(number, min_val, max_val)",
    "description": "Check if number is in range [min_val, max_val]",
    "resultLine": "\n\nresult = in_range(**{k: v for k, v in [(\"number\", arg1 if arg1 != \"__OMITTED__\" else None), (\"min_val\", arg2 if arg2 != \"__OMITTED__\" else None), (\"max_val\", arg3 if arg3 != \"__OMITTED__\" else None)] if v is not None})",
    "formula": "=LAMBDA(number, min_val, max_val, LOCAL.EXEC(\"workbook-settings:in_range\", number, min_val, max_val))",
    "timestamp": "2025-03-03T17:01:12.718Z",
    "uid": "anonymous",
    "excelExample": "=IN_RANGE(5, 0, 10)",
    "parameters": [
      {
        "name": "number"
      },
      {
        "name": "min_val"
      },
      {
        "name": "max_val"
      }
    ],
    "code": "def in_range(number, min_val, max_val):\n    \"\"\"Check if number is in range [min_val, max_val].\n    Args:\n        number (float): Number to check\n        min_val (float): Minimum value\n        max_val (float): Maximum value\n    Returns:\n        bool: True if in range, False otherwise\n    \"\"\"\n    return min_val <= number <= max_val\n\ntest_cases = [\n    [5, 0, 10],       # -> True\n    [-1, 0, 100],     # -> False\n    [50, 50, 50],     # -> True\n    [25, 0, 20],      # -> False\n    [3.14, 3, 4]      # -> True\n]\n\n# Excel usage: =IN_RANGE(5, 0, 10)",
    "fileName": "in_range.ipynb",
    "fileId": "8"
  },
  {
    "name": "join_strings",
    "signature": "JOIN_STRINGS(first_str, second_str, separator)",
    "description": "Join two strings with a separator",
    "resultLine": "\n\nresult = join_strings(**{k: v for k, v in [(\"first_str\", arg1 if arg1 != \"__OMITTED__\" else None), (\"second_str\", arg2 if arg2 != \"__OMITTED__\" else None), (\"separator\", arg3 if arg3 != \"__OMITTED__\" else None)] if v is not None})",
    "formula": "=LAMBDA(first_str, second_str, separator, LOCAL.EXEC(\"workbook-settings:join_strings\", first_str, second_str, separator))",
    "timestamp": "2025-03-03T17:01:23.821Z",
    "uid": "anonymous",
    "excelExample": "=JOIN_STRINGS(\"hello\", \"world\", \" \")",
    "parameters": [
      {
        "name": "first_str"
      },
      {
        "name": "second_str"
      },
      {
        "name": "separator"
      }
    ],
    "code": "def join_strings(first_str, second_str, separator):\n    \"\"\"Join two strings with a separator.\n    Args:\n        first_str (str): First string\n        second_str (str): Second string\n        separator (str): Separator between strings\n    Returns:\n        str: Joined string\n    \"\"\"\n    return f\"{first_str}{separator}{second_str}\"\n\ntest_cases = [\n    [\"hello\", \"world\", \" \"],      # -> \"hello world\"\n    [\"first\", \"last\", \"-\"],       # -> \"first-last\"\n    [\"a\", \"b\", \"_\"],             # -> \"a_b\"\n    [\"python\", \"code\", \"::\"],     # -> \"python::code\"\n    [\"x\", \"y\", \"\"]               # -> \"xy\"\n]\n\n# Excel usage: =JOIN_STRINGS(\"hello\", \"world\", \" \")",
    "fileName": "join_strings.ipynb",
    "fileId": "9"
  }
]