[
  {
    "description": "Calculate text similarity (aka fuzzy matching) scores between strings.",
    "name": "text_distance",
    "code": "import textdistance\n\ndef text_distance(needle, haystack, algorithm='jaccard'):\n    \"\"\"Calculate text similarity scores between needle(s) and haystack items.\n    \n    Args:\n        needle: 2D list of strings to search for\n        haystack: 2D list of strings to search within\n        algorithm (str): Algorithm name from textdistance library (default: 'jaccard')\n    \n    Returns:\n        list: 2D list of [position, score] pairs for best matches\n    \"\"\"\n    # Get the algorithm function from textdistance\n    algo_func = getattr(textdistance, algorithm)\n    \n    # Flatten 2D lists\n    needle_flat = [item for sublist in needle for item in sublist if item is not None]\n    haystack_flat = [item for sublist in haystack for item in sublist if item is not None]\n    \n    results = []\n    for needle_item in needle_flat:\n        if not str(needle_item).strip():\n            results.append([0, 0.0])  # Handle empty values\n            continue\n            \n        # Calculate similarity scores with normalization and round to 2 decimal places\n        # Adjust index to be 1-based\n        scores = [(index + 1, round(algo_func.normalized_similarity(str(needle_item), str(item)), 2)) \n                 for index, item in enumerate(haystack_flat)]\n        # Sort based on scores in descending order\n        scores.sort(key=lambda x: x[1], reverse=True)\n        # Append the top index and score to results as a list\n        results.append(list(scores[0]) if scores else [0, 0.0])\n\n    return results\n\n# Test cases\ntest_cases = [\n    [\n        [[\"apple\"]], \n        [[\"apple\"], [\"banana\"], [\"orange\"], [\"grape\"]]\n    ],  # Exact match\n    [\n        [[\"aple\"]], \n        [[\"apple\"], [\"banana\"], [\"orange\"], [\"grape\"]]\n    ],  # Close match\n    [\n        [[\"car\"], [\"truck\"]], \n        [[\"car\"], [\"bus\"], [\"train\"], [\"truck\"]]\n    ],  # Multiple needle items\n    [\n        [[\"London\", \"Paris\"]], \n        [[\"New York\"], [\"London\"], [\"Tokyo\"], [\"Berlin\"]]\n    ],  # Multiple items per needle sublist, column vector haystack\n    [\n        [[\"cat\", \"dog\"]], \n        [[\"cat\"], [\"dog\"], [\"fish\"]]\n    ]  # Different haystack structure\n]\n\n# Excel usage: =TEXT_DISTANCE(\"apple\", {\"appl\",\"banana\"}, \"jaccard\")",
    "fileName": "text_distance.ipynb",
    "fileId": "13"
  },
  {
    "description": "Add two days to the given date",
    "name": "add_days",
    "code": "def add_days(date_input):\n    \"\"\"Add two days to the given date.\n    Args:\n        date_input (str or int): Date in 'YYYY-MM-DD' format or Excel serial date\n    Returns:\n        str: New date in 'YYYY-MM-DD' format\n    \"\"\"\n    from datetime import datetime, timedelta\n    \n    if isinstance(date_input, int):\n        # Excel serial date to datetime conversion\n        date = datetime(1899, 12, 30) + timedelta(days=date_input)\n    else:\n        date = datetime.strptime(date_input, '%Y-%m-%d')\n    \n    new_date = date + timedelta(days=2)\n    return new_date.strftime('%Y-%m-%d')\n\ntest_cases = [\n    [43831],\n    [44561],\n    ['2024-06-15'],\n    ['2025-01-01']\n]\n\n# Excel usage: =ADD_DAYS(43831)",
    "fileName": "add_days.ipynb",
    "fileId": "14"
  },
  {
    "description": "Uses AI to generate responses based on prompts and optional data ranges",
    "name": "ask_ai",
    "code": "import requests\nimport json\n\ndef ask_ai(prompt, data=None, temperature=0.5, max_tokens=250, model='mistral-small-2501'):\n    \"\"\"\n    Uses AI to generate responses based on prompts and optional data ranges.\n\n    Args:\n        prompt (str): The question, task, or analysis to perform\n        data (list, optional): 2D list containing data from Excel range to analyze\n        temperature (float, optional): Controls response creativity (0-2). Default is 0\n        max_tokens (int, optional): Maximum tokens for response generation\n        model (str, optional): ID of the model to use\n        api_key (str, optional): API key for authentication. If None, uses OPENAI_API_KEY from env vars\n\n    Returns:\n        str: The AI-generated response\n    \"\"\"\n    \n    # Using Boardflare API for demo purposes. Replace with any OpenAI compatible API endpoint.\n    # Sign up for your free Mistral API account at https://console.mistral.ai/ then replace the following:\n    \n    api_url = \"https://llm.boardflare.com\" # replace with \"https://api.mistral.ai/v1/chat/completions\"\n    api_key = \"cV4a59t1wjYGs....\" # replace with your Mistral API key\n    \n    # Construct the message incorporating both prompt and data if provided\n    message = prompt\n    if data is not None:\n        data_str = json.dumps(data, indent=2)\n        message += f\"\\n\\nData to analyze:\\n{data_str}\"\n    \n    # Prepare the API request payload\n    payload = {\n        \"messages\": [{\"role\": \"user\", \"content\": message}],\n        \"temperature\": temperature,\n        \"model\": model,\n        \"max_tokens\": max_tokens\n    }\n    \n    headers = {\n        \"Authorization\": f\"Bearer {api_key}\",\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n    }\n    \n    # Make the API request\n    response = requests.post(api_url, headers=headers, json=payload)\n    response.raise_for_status()\n    \n    # Extract and return the response content\n    response_data = response.json()\n    content = response_data[\"choices\"][0][\"message\"][\"content\"]\n\n    return content\n    \ntest_cases = [[\"What is the capital of France?\"]]\n\n# Excel usage: =ASK_AI(\"What is the capital of France?\")",
    "fileName": "ask_ai.ipynb",
    "fileId": "15"
  },
  {
    "description": "Uses AI to generate a table of information.",
    "name": "ai_table",
    "code": "import requests\nimport json\n\ndef ai_table(prompt, header=None, source=None, temperature=0.0, model='mistral-small-2501', max_tokens=1500):\n    \"\"\"\n    Uses AI to generate a structured table based on the prompt and optional header/source data.\n    \n    Args:\n        prompt (str): Instruction for AI to create a table\n        header (list, optional): 2D list containing table header (column names)\n        source (list, optional): 2D list containing source data used to create the table\n        temperature (float, optional): Controls response creativity (0-2). Default is 0\n        model (str, optional): ID of the model to use\n        max_tokens (int, optional): Maximum tokens for response generation. Default is 800\n        \n    Returns:\n        list: 2D list representing the generated table data\n    \"\"\"\n    # Using Boardflare API for demo purposes. Replace with any OpenAI compatible API endpoint.\n    api_url = \"https://llm.boardflare.com\" # replace with \"https://api.mistral.ai/v1/chat/completions\"\n    api_key = \"cV4a59t1wjYGs....\" # replace with your Mistral API key\n    \n    # Construct a specific prompt for table generation\n    table_prompt = f\"Generate a well-organized table based on this request: {prompt}\"\n    \n    # Add header information if provided\n    if header is not None:\n        # Assuming header is a 2D list with a single row for column names\n        if header and len(header) > 0:\n            header_str = \", \".join(str(col) for col in header[0])\n            table_prompt += f\"\\nUse exactly these columns: {header_str}\"\n    \n    # Add source data information if provided\n    if source is not None:\n        source_str = json.dumps(source, indent=2)\n        table_prompt += f\"\\n\\nUse this source data to create the table:\\n{source_str}\"\n    \n    # Add instruction for structured output\n    table_prompt += \"\\nReturn ONLY a JSON array of arrays (2D array) with the table data. \"\n    table_prompt += \"The first row should contain column headers if not provided. \"\n    table_prompt += \"Each subsequent row should contain data that fits the columns. \"\n    table_prompt += \"Do not include any explanatory text, just the JSON array.\"\n    \n    # Prepare the API request payload\n    payload = {\n        \"messages\": [{\"role\": \"user\", \"content\": table_prompt}],\n        \"temperature\": temperature,\n        \"model\": model,\n        \"max_tokens\": max_tokens,\n        \"response_format\": {\n            \"type\": \"json_object\",\n        }\n    }\n    \n    headers = {\n        \"Authorization\": f\"Bearer {api_key}\",\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n    }\n    \n    try:\n        # Make the API request\n        response = requests.post(api_url, headers=headers, json=payload)\n        response.raise_for_status()\n        \n        # Extract the response content\n        response_data = response.json()\n        content = response_data[\"choices\"][0][\"message\"][\"content\"]\n        # print(content)\n        \n        # Extract the JSON array from the response\n        try:\n            # Try to parse the content as JSON directly\n            table_data = json.loads(content)\n            return table_data\n        except (json.JSONDecodeError, ValueError):\n            # If JSON parsing fails, return an error message as a single cell\n            return [[\"Error: Unable to generate table. The AI response wasn't in the expected format.\"]]\n             \n    except requests.exceptions.RequestException as e:\n        # Handle API request errors\n        return [[\"Error: API request failed.\", str(e)]]\n\n# Test cases\ntest_cases = [\n    [\"Generate a table of top 5 tourist destinations and include columns for country, popular attractions, best time to visit, and average cost.\", \n     [[\"Country\", \"Popular Attractions\", \"Best Time to Visit\", \"Average Cost\"]]],\n    [\"Create a table comparing top 5 programming languages including columns for language name, paradigm, typical use cases, and learning difficulty.\"]\n]\n\n# Excel usage: =AI_TABLE(\"Generate a table of top 5 tourist destinations and include columns for country, popular attractions, best time to visit, and average cost.\", {\"Country\", \"Popular Attractions\", \"Best Time to Visit\", \"Average Cost\"})",
    "fileName": "ai_table.ipynb",
    "fileId": "19"
  },
  {
    "name": "calculate_area",
    "description": "Calculate area of rectangle",
    "code": "def calculate_area(length, width):\n    \"\"\"Calculate area of rectangle.\n    Args:\n        length (float): Length of rectangle\n        width (float): Width of rectangle\n    Returns:\n        float: Area of rectangle\n    \"\"\"\n    return length * width\n\ntest_cases = [\n    [5, 4],      # -> 20\n    [2.5, 4],    # -> 10\n    [10, 10],    # -> 100\n    [1, 1],      # -> 1\n    [0.5, 2]     # -> 1\n]\n\n# Excel usage: =CALCULATE_AREA(5, 4)",
    "fileName": "calculate_area.ipynb",
    "fileId": "20"
  },
  {
    "description": "Returns web page content in markdown format using Jina.",
    "name": "web_content",
    "code": "import requests\n\ndef web_content(url):\n    \"\"\"\n    Returns web page content in markdown format using Jina.  Useful as a starting point for extraction, summarization, etc.\n\n    Args:\n        url (str): The full URL to fetch.\n\n    Returns:\n        str: The content of the response from the URL.\n    \"\"\"\n    headers = {\n        \"X-Retain-Images\": \"none\"\n    }\n    base_url = \"https://r.jina.ai/\"\n    full_url = base_url + url\n    response = requests.get(full_url, headers=headers)\n    response.raise_for_status()\n    content = response.text.split(\"Markdown Content:\")[1]\n    return content\n\n# Test case using Y Combinator company page for \"airbnb\"\ntest_cases = [\n    [\"https://www.ycombinator.com/companies/airbnb\"]\n]\n\n# Excel usage: =WEB_CONTENT(\"https://www.ycombinator.com/companies/airbnb\")\n\n",
    "fileName": "web_content.ipynb",
    "fileId": "21"
  }
]