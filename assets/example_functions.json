[
  {
    "name": "ai_ask",
    "description": "Uses AI to generate responses based on prompts and optional data ranges.",
    "code": "import requests\nimport json\n\ndef ai_ask(prompt, data=None, temperature=0.5, max_tokens=250, model='mistral-small-latest'):\n    \"\"\"\n    Uses AI to generate responses based on prompts and optional data ranges.\n\n    Args:\n        prompt (str): The question, task, or analysis to perform\n        data (list, optional): 2D list containing data from Excel range to analyze\n        temperature (float, optional): Controls response creativity (0-2). Default is 0.5\n        max_tokens (int, optional): Maximum tokens for response generation\n        model (str, optional): ID of the model to use\n        # Note: API key is hardcoded for this example, replace with secure handling in production\n\n    Returns:\n        str: The AI-generated response\n    \"\"\"\n    \n    # Using Boardflare API for demo purposes. Replace with any OpenAI compatible API endpoint.\n    # Sign up for your free Mistral API account at https://console.mistral.ai/ then replace the following:\n    \n    api_url = \"https://llm.boardflare.com\" # replace with \"https://api.mistral.ai/v1/chat/completions\"\n    api_key = \"cV4a59t1wjYGs....\" # replace with your Mistral API key\n    \n    # Construct the message incorporating both prompt and data if provided\n    message = prompt\n    if data is not None:\n        data_str = json.dumps(data, indent=2)\n        message += f\"\\n\\nData to analyze:\\n{data_str}\"\n    \n    # Prepare the API request payload\n    payload = {\n        \"messages\": [{\"role\": \"user\", \"content\": message}],\n        \"temperature\": temperature,\n        \"model\": model,\n        \"max_tokens\": max_tokens\n    }\n    \n    headers = {\n        \"Authorization\": f\"Bearer {api_key}\",\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n    }\n    \n    # Make the API request\n    response = requests.post(api_url, headers=headers, json=payload)\n    response.raise_for_status()\n    \n    # Extract and return the response content\n    response_data = response.json()\n    content = response_data[\"choices\"][0][\"message\"][\"content\"]\n\n    return content",
    "excelExample": "=AI_ASK(\"Write a one-sentence test response\")",
    "fileId": "1"
  },
  {
    "name": "ai_choice",
    "description": "Uses AI to select the most appropriate value from a list of choices based on the input text.",
    "code": "import requests\nimport json\nimport re\n\ndef ai_choice(text, choices, temperature=0.0, model='mistral-small-latest', max_tokens=500):\n    \"\"\"\n    Uses AI to select the most appropriate value from a list of choices based on the input text.\n    \n    Args:\n        text (str or list): The text to analyze (string or 2D list with a single cell)\n        choices (str or list): String with comma-separated choices or 2D list of choices\n        temperature (float, optional): Controls response creativity (0-2). Default is 0\n        model (str, optional): ID of the model to use\n        max_tokens (int, optional): Maximum tokens for response generation. Default is 500\n        \n    Returns:\n        str: The selected choice from the provided options\n    \"\"\"\n    # Handle 2D list input for text (flatten to a single string)\n    if isinstance(text, list):\n        if len(text) > 0 and len(text[0]) > 0:\n            text = str(text[0][0])\n        else:\n            return \"Error: Empty input text.\"\n    \n    # Process choices input\n    choices_list = []\n    if isinstance(choices, str):\n        # Parse comma-separated string of choices\n        choices_list = [choice.strip() for choice in choices.split(',') if choice.strip()]\n    elif isinstance(choices, list):\n        # Extract choices from 2D list\n        for row in choices:\n            if row and len(row) > 0:\n                choices_list.append(str(row[0]))\n    \n    # Validate choices\n    if not choices_list:\n        return \"Error: No valid choices provided.\"\n    \n    # Using Boardflare API for demo purposes. Replace with any OpenAI compatible API endpoint.\n    api_url = \"https://llm.boardflare.com\" # replace with \"https://api.mistral.ai/v1/chat/completions\"\n    api_key = \"cV4a59t1wjYGs....\" # replace with your Mistral API key\n    \n    # Construct a specific prompt for selecting a choice\n    choices_formatted = \", \".join([f\"\\\"{choice}\\\"\" for choice in choices_list])\n    choice_prompt = f\"Select the most appropriate option from these choices: {choices_formatted}\\n\\nInput text: {text}\"\n    \n    # Add instruction for structured output\n    choice_prompt += \"\\n\\nReturn ONLY a JSON object with a 'selected_choice' field containing the exact choice you selected from the provided options. \"\n    choice_prompt += \"The selected choice must match exactly one of the provided options. \"\n    choice_prompt += \"Do not include any explanatory text, just the JSON object.\"\n    \n    # Prepare the API request payload\n    payload = {\n        \"messages\": [{\"role\": \"user\", \"content\": choice_prompt}],\n        \"temperature\": temperature,\n        \"model\": model,\n        \"max_tokens\": max_tokens,\n        \"response_format\": {\n            \"type\": \"json_object\",\n        }\n    }\n    \n    headers = {\n        \"Authorization\": f\"Bearer {api_key}\",\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n    }\n    \n    try:\n        # Make the API request\n        response = requests.post(api_url, headers=headers, json=payload)\n        response.raise_for_status()\n        \n        # Extract the response content\n        response_data = response.json()\n        content = response_data[\"choices\"][0][\"message\"][\"content\"]\n        # print(content)\n        \n        # Extract the selected choice from the response\n        try:\n            # Try to parse the content as JSON directly\n            choice_data = json.loads(content)\n            \n            # Get the selected choice from the JSON object\n            if isinstance(choice_data, dict) and \"selected_choice\" in choice_data:\n                selected = choice_data[\"selected_choice\"]\n                \n                # Verify the selected choice is in the original choices list\n                if selected in choices_list:\n                    return selected\n                else:\n                    # Try case-insensitive matching as fallback\n                    for choice in choices_list:\n                        if choice.lower() == selected.lower():\n                            return choice\n                    return \"Error: AI selected a choice that wasn't in the original options.\"\n            else:\n                return \"Error: Unable to parse response. Expected a JSON object with 'selected_choice' field.\"\n                \n        except (json.JSONDecodeError, ValueError):\n            # If JSON parsing fails, return an error message\n            return \"Error: Unable to determine choice. The AI response wasn't in the expected format.\"\n             \n    except requests.exceptions.RequestException as e:\n        # Handle API request errors\n        return f\"Error: API request failed. {str(e)}\"",
    "excelExample": "=AI_CHOICE(\"We are very satisfied with the product quality and customer service.\", \"Positive, Neutral, Negative\")",
    "fileId": "2"
  },
  {
    "name": "ai_extract",
    "description": "Uses AI to extract specific types of information from text.",
    "code": "import requests\nimport json\n\ndef ai_extract(text, extract_type, temperature=0.0, model='mistral-small-latest', max_tokens=1000):\n    \"\"\"\n    Uses AI to extract specific types of information from text.\n    \n    Args:\n        text (str or list): The text to analyze (string or 2D list with a single cell)\n        extract_type (str): Type of information to extract (e.g., 'emails', 'dates', 'action items')\n        temperature (float, optional): Controls response creativity (0-2). Default is 0\n        model (str, optional): ID of the model to use\n        max_tokens (int, optional): Maximum tokens for response generation. Default is 1000\n        \n    Returns:\n        list: 2D list representing the extracted data as a single column\n    \"\"\"\n    # Handle 2D list input (flatten to a single string)\n    if isinstance(text, list):\n        if len(text) > 0 and len(text[0]) > 0:\n            text = str(text[0][0])\n        else:\n            return [[\"Error: Empty input text.\"]]\n    \n    # Using Boardflare API for demo purposes. Replace with any OpenAI compatible API endpoint.\n    api_url = \"https://llm.boardflare.com\" # replace with \"https://api.mistral.ai/v1/chat/completions\"\n    api_key = \"cV4a59t1wjYGs....\" # replace with your Mistral API key\n    \n    # Construct a specific prompt for data extraction\n    extract_prompt = f\"Extract the following from the text: {extract_type}\\n\\nText: {text}\"\n    \n    # Add instruction for structured output\n    extract_prompt += \"\\n\\nReturn ONLY a JSON array of items you extracted. \"\n    extract_prompt += \"Each item should be a single value representing one extracted piece of information. \"\n    extract_prompt += \"Do not include any explanatory text, just the JSON array.\"\n    \n    # Prepare the API request payload\n    payload = {\n        \"messages\": [{\"role\": \"user\", \"content\": extract_prompt}],\n        \"temperature\": temperature,\n        \"model\": model,\n        \"max_tokens\": max_tokens,\n        \"response_format\": {\n            \"type\": \"json_object\",\n        }\n    }\n    \n    headers = {\n        \"Authorization\": f\"Bearer {api_key}\",\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n    }\n    \n    try:\n        # Make the API request\n        response = requests.post(api_url, headers=headers, json=payload)\n        response.raise_for_status()\n        \n        # Extract the response content\n        response_data = response.json()\n        content = response_data[\"choices\"][0][\"message\"][\"content\"]\n        # print(content)\n        \n        # Extract the JSON array from the response\n        try:\n            # Try to parse the content as JSON directly\n            extracted_data = json.loads(content)\n            \n            # If extracted_data is a dictionary with an \"items\" or \"extracted\" key, use that\n            if isinstance(extracted_data, dict):\n                if \"items\" in extracted_data:\n                    extracted_data = extracted_data[\"items\"]\n                elif \"extracted\" in extracted_data:\n                    extracted_data = extracted_data[\"extracted\"]\n                elif \"results\" in extracted_data:\n                    extracted_data = extracted_data[\"results\"]\n            \n            # Convert the list to a 2D list (single column)\n            if isinstance(extracted_data, list):\n                return [[item] for item in extracted_data]\n            else:\n                return [[\"Error: Unable to parse response. Expected a list.\"]]\n                \n        except (json.JSONDecodeError, ValueError):\n            # If JSON parsing fails, return an error message as a single cell\n            return [[\"Error: Unable to extract data. The AI response wasn't in the expected format.\"]]\n             \n    except requests.exceptions.RequestException as e:\n        # Handle API request errors\n        return [[\"Error: API request failed.\", str(e)]]",
    "excelExample": "=AI_EXTRACT(\"The meeting is scheduled for March 15, 2025.\", \"dates\")",
    "fileId": "3"
  },
  {
    "name": "ai_fill",
    "description": "Uses AI to fill in missing data in a target range by learning patterns from an example range.",
    "code": "import requests\nimport json\n\ndef ai_fill(example_range, fill_range, temperature=0.0, model='mistral-small-latest', max_tokens=1500):\n    \"\"\"\n    Uses AI to fill in missing data in a target range by learning patterns from an example range.\n    \n    Args:\n        example_range (list): 2D list containing complete data as examples for the AI to learn from\n        fill_range (list): 2D list containing data with missing values to be filled\n        temperature (float, optional): Controls response creativity (0-2). Default is 0\n        model (str, optional): ID of the model to use\n        max_tokens (int, optional): Maximum tokens for response generation. Default is 1500\n        \n    Returns:\n        list: 2D list with missing data filled in\n    \"\"\"\n    # Validate inputs\n    if not isinstance(example_range, list) or not example_range:\n        return [[\"Error: Example range is empty or invalid.\"]]\n    if not isinstance(fill_range, list) or not fill_range:\n        return [[\"Error: Fill range is empty or invalid.\"]]\n    \n    # Using Boardflare API for demo purposes. Replace with any OpenAI compatible API endpoint.\n    api_url = \"https://llm.boardflare.com\" # replace with \"https://api.mistral.ai/v1/chat/completions\"\n    api_key = \"cV4a59t1wjYGs....\" # replace with your Mistral API key\n    \n    # Convert example_range and fill_range to JSON strings for the prompt\n    example_json = json.dumps(example_range)\n    fill_json = json.dumps(fill_range)\n    \n    # Construct a specific prompt for filling data\n    fill_prompt = \"\"\"Fill in the missing values in the target data based on patterns in the example data.\nExample data (complete): {}\\n\\n\nTarget data (with missing values): {}\\n\\n\nStudy the patterns in the example data and complete the target data by filling in missing values. Preserve all existing values in the target data.\"\"\".format(\n        example_json, fill_json\n    )\n    \n    # Add instruction for structured output\n    fill_prompt += \"\\n\\nReturn ONLY a JSON array of arrays (2D array) with the completed target data. \"\n    fill_prompt += \"Do not include any explanatory text, just the JSON array.\"\n    \n    # Prepare the API request payload\n    payload = {\n        \"messages\": [{\"role\": \"user\", \"content\": fill_prompt}],\n        \"temperature\": temperature,\n        \"model\": model,\n        \"max_tokens\": max_tokens,\n        \"response_format\": {\n            \"type\": \"json_object\",\n        }\n    }\n    \n    headers = {\n        \"Authorization\": f\"Bearer {api_key}\",\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n    }\n    \n    try:\n        # Make the API request\n        response = requests.post(api_url, headers=headers, json=payload)\n        response.raise_for_status()\n        \n        # Extract the response content\n        response_data = response.json()\n        content = response_data[\"choices\"][0][\"message\"][\"content\"]\n        # print(content)\n        \n        # Extract the filled data from the response\n        try:\n            # Try to parse the content as JSON directly\n            filled_data = json.loads(content)\n            \n            # If filled_data is a dictionary with a \"data\" or \"filled_data\" key, use that\n            if isinstance(filled_data, dict):\n                if \"data\" in filled_data:\n                    filled_data = filled_data[\"data\"]\n                elif \"filled_data\" in filled_data:\n                    filled_data = filled_data[\"filled_data\"]\n                elif \"result\" in filled_data:\n                    filled_data = filled_data[\"result\"]\n            \n            # Ensure the filled data is a 2D list\n            if isinstance(filled_data, list) and all(isinstance(row, list) for row in filled_data):\n                # Ensure the dimensions match the original fill_range\n                if (len(filled_data) == len(fill_range) and \n                    all(len(row) == len(fill_range[i]) for i, row in enumerate(filled_data))):\n                    return filled_data\n                else:\n                    return [[\"Error: AI response dimensions don't match the fill range.\"]]\n            else:\n                return [[\"Error: Unable to parse response. Expected a 2D array.\"]]\n                \n        except (json.JSONDecodeError, ValueError):\n            # If JSON parsing fails, return an error message\n            return [[\"Error: Unable to fill data. The AI response wasn't in the expected format.\"]]\n             \n    except requests.exceptions.RequestException as e:\n        # Handle API request errors\n        return [[\"Error: API request failed.\", str(e)]]",
    "excelExample": "=AI_FILL(example_range, fill_range)",
    "fileId": "4"
  },
  {
    "name": "ai_format",
    "description": "Uses AI to format text according to a specific structure or pattern.",
    "code": "import requests\nimport json\n\ndef ai_format(text, format_instruction, temperature=0.0, model='mistral-small-latest', max_tokens=1500):\n    \"\"\"\n    Uses AI to format text according to a specific structure or pattern.\n    \n    Args:\n        text (str or list): The text to format (string or 2D list with a single cell)\n        format_instruction (str): Instructions describing the desired format\n        temperature (float, optional): Controls response creativity (0-2). Default is 0\n        model (str, optional): ID of the model to use\n        max_tokens (int, optional): Maximum tokens for response generation. Default is 1500\n        \n    Returns:\n        str: The formatted text according to the specified format\n    \"\"\"\n    # Handle 2D list input (flatten to a single string)\n    if isinstance(text, list):\n        if len(text) > 0 and len(text[0]) > 0:\n            text = str(text[0][0])\n        else:\n            return \"Error: Empty input text.\"\n    \n    # Using Boardflare API for demo purposes. Replace with any OpenAI compatible API endpoint.\n    api_url = \"https://llm.boardflare.com\" # replace with \"https://api.mistral.ai/v1/chat/completions\"\n    api_key = \"cV4a59t1wjYGs....\" # replace with your Mistral API key\n    \n    # Construct a specific prompt for formatting\n    format_prompt = f\"Format the following text according to this format instruction: {format_instruction}\\n\\nText to format: {text}\"\n    \n    # Remove JSON object instructions, just ask for plain formatted text\n    format_prompt += \"\\n\\nReturn ONLY the formatted text. Do not include any explanatory text, just the formatted result.\"\n    \n    # Prepare the API request payload\n    payload = {\n        \"messages\": [{\"role\": \"user\", \"content\": format_prompt}],\n        \"temperature\": temperature,\n        \"model\": model,\n        \"max_tokens\": max_tokens\n    }\n    \n    headers = {\n        \"Authorization\": f\"Bearer {api_key}\",\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n    }\n    \n    try:\n        # Make the API request\n        response = requests.post(api_url, headers=headers, json=payload)\n        response.raise_for_status()\n        \n        # Extract the response content\n        response_data = response.json()\n        content = response_data[\"choices\"][0][\"message\"][\"content\"]\n        \n        # Return the plain formatted text\n        return content.strip()\n        \n    except requests.exceptions.RequestException as e:\n        # Handle API request errors\n        return f\"Error: API request failed. {str(e)}\"",
    "excelExample": "=AI_FORMAT(\"sample text\", \"plain text format\")",
    "fileId": "5"
  },
  {
    "name": "ai_list",
    "description": "Uses AI to generate a list of items based on the prompt and optional values data.",
    "code": "import requests\nimport json\n\ndef ai_list(prompt, values=None, temperature=0.0, model='mistral-small-latest', max_tokens=1000):\n    \"\"\"\n    Uses AI to generate a list of items based on the prompt and optional values data.\n    \n    Args:\n        prompt (str): Instruction for AI to create a list\n        values (list, optional): 2D list containing additional data to append to prompt\n        temperature (float, optional): Controls response creativity (0-2). Default is 0\n        model (str, optional): ID of the model to use\n        max_tokens (int, optional): Maximum tokens for response generation. Default is 1000\n        \n    Returns:\n        list: 2D list representing the generated list data as a single column\n    \"\"\"\n    # Using Boardflare API for demo purposes. Replace with any OpenAI compatible API endpoint.\n    api_url = \"https://llm.boardflare.com\" # replace with \"https://api.mistral.ai/v1/chat/completions\"\n    api_key = \"cV4a59t1wjYGs....\" # replace with your Mistral API key\n    \n    # Construct a specific prompt for list generation\n    list_prompt = f\"Generate a list based on this request: {prompt}\"\n    \n    # Add values information if provided\n    if values is not None:\n        values_str = \"\\n\".join([str(item[0]) for item in values]) if len(values) > 0 and len(values[0]) > 0 else \"\"\n        if values_str:\n            list_prompt += f\"\\n\\nUse this information to help create the list:\\n{values_str}\"\n    \n    # Add instruction for structured output\n    list_prompt += \"\\nReturn ONLY a JSON array of items for the list. \"\n    list_prompt += \"Each item should be a single value. \"\n    list_prompt += \"Do not include any explanatory text, just the JSON array.\"\n    \n    # Prepare the API request payload\n    payload = {\n        \"messages\": [{\"role\": \"user\", \"content\": list_prompt}],\n        \"temperature\": temperature,\n        \"model\": model,\n        \"max_tokens\": max_tokens,\n        \"response_format\": {\n            \"type\": \"json_object\",\n        }\n    }\n    \n    headers = {\n        \"Authorization\": f\"Bearer {api_key}\",\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n    }\n    \n    try:\n        # Make the API request\n        response = requests.post(api_url, headers=headers, json=payload)\n        response.raise_for_status()\n        \n        # Extract the response content\n        response_data = response.json()\n        content = response_data[\"choices\"][0][\"message\"][\"content\"]\n        \n        # Extract the JSON array from the response\n        try:\n            # Try to parse the content as JSON directly\n            list_data = json.loads(content)\n            \n            # If list_data is a dictionary with an \"items\" or \"list\" key, use that\n            if isinstance(list_data, dict):\n                if \"items\" in list_data:\n                    list_data = list_data[\"items\"]\n                elif \"list\" in list_data:\n                    list_data = list_data[\"list\"]\n                else:\n                    # Check for any array key in the response\n                    for key, value in list_data.items():\n                        if isinstance(value, list):\n                            list_data = value\n                            break\n            \n            # Convert the list to a 2D list (single column)\n            if isinstance(list_data, list):\n                # Ensure each item is a string and properly formatted as a single-item list\n                result = []\n                for item in list_data:\n                    if isinstance(item, list):\n                        # If item is already a list, ensure it has exactly one element\n                        if len(item) >= 1:\n                            result.append([str(item[0])])\n                        else:\n                            result.append([\"\"])\n                    else:\n                        # If item is not a list, make it a single-item list\n                        result.append([str(item)])\n                return result\n            else:\n                return [[\"Error: Unable to parse response. Expected a list.\"]]\n                \n        except (json.JSONDecodeError, ValueError):\n            # If JSON parsing fails, return an error message as a single cell\n            return [[\"Error: Unable to generate list. The AI response wasn't in the expected format.\"]]\n             \n    except requests.exceptions.RequestException as e:\n        # Handle API request errors\n        return [[\"Error: API request failed.\", str(e)]]",
    "excelExample": "=AI_LIST(\"List 3 important financial metrics\")",
    "fileId": "6"
  },
  {
    "name": "ai_summarize",
    "description": "Uses AI to generate a concise summary of the provided text.",
    "code": "import requests\nimport json\n\ndef ai_summarize(text, max_length=\"medium\", format=\"paragraph\", temperature=0.0, model='mistral-small-latest', max_tokens=1000):\n    \"\"\"\n    Uses AI to generate a concise summary of the provided text.\n    \n    Args:\n        text (str or list): The text to summarize (string or 2D list with a single cell)\n        max_length (str or int): Target length for summary (\"short\", \"medium\", \"long\" or word/sentence count)\n        format (str): Output format (\"paragraph\", \"bullets\", \"key_points\")\n        temperature (float, optional): Controls response creativity (0-2). Default is 0\n        model (str, optional): ID of the model to use\n        max_tokens (int, optional): Maximum tokens for response generation. Default is 1000\n        \n    Returns:\n        list: 2D list representing the summary (single cell for paragraph format,\n              single column for bullets or key_points format)\n    \"\"\"\n    # Handle 2D list input (flatten to a single string)\n    if isinstance(text, list):\n        if len(text) > 0 and len(text[0]) > 0:\n            # If it's a 2D range with multiple cells, concatenate the content\n            full_text = []\n            for row in text:\n                for cell in row:\n                    if cell:  # Skip empty cells\n                        full_text.append(str(cell))\n            text = \" \".join(full_text)\n        else:\n            return [[\"Error: Empty input text.\"]]\n    \n    # Validate format\n    valid_formats = [\"paragraph\", \"bullets\", \"key_points\"]\n    if format.lower() not in valid_formats:\n        return [[f\"Error: Invalid format. Choose from {', '.join(valid_formats)}\"]]\n    \n    # Using Boardflare API for demo purposes. Replace with any OpenAI compatible API endpoint.\n    api_url = \"https://llm.boardflare.com\" # replace with \"https://api.mistral.ai/v1/chat/completions\"\n    api_key = \"cV4a59t1wjYGs....\" # replace with your Mistral API key\n    \n    # Construct a specific prompt for summarization\n    length_instruction = \"\"\n    if isinstance(max_length, int):\n        length_instruction = f\"in approximately {max_length} words\"\n    elif isinstance(max_length, str):\n        if max_length.lower() == \"short\":\n            length_instruction = \"in a very concise way, focusing only on the most critical points\"\n        elif max_length.lower() == \"medium\":\n            length_instruction = \"in a moderately detailed way, covering the main points\"\n        elif max_length.lower() == \"long\":\n            length_instruction = \"in a comprehensive way, covering all significant details\"\n        else:\n            # Treat as a word count if it's a numeric string\n            try:\n                word_count = int(max_length)\n                length_instruction = f\"in approximately {word_count} words\"\n            except ValueError:\n                length_instruction = \"in a moderately detailed way\"\n    \n    format_instruction = \"\"\n    if format.lower() == \"paragraph\":\n        format_instruction = \"as a single coherent paragraph\"\n    elif format.lower() == \"bullets\":\n        format_instruction = \"as a bulleted list of key points\"\n    elif format.lower() == \"key_points\":\n        format_instruction = \"as an organized list of key points grouped by categories\"\n    \n    summary_prompt = f\"Summarize the following text {length_instruction} {format_instruction}:\\n\\n{text}\"\n    \n    # Add instruction for structured output\n    if format.lower() == \"paragraph\":\n        summary_prompt += \"\\n\\nReturn ONLY a JSON object with a 'summary' field containing the paragraph summary. \"\n        summary_prompt += \"Do not include any explanatory text, just the JSON object.\"\n    else:  # bullets or key_points\n        summary_prompt += \"\\n\\nReturn ONLY a JSON object with a 'summary_points' field containing an array of summary points. \"\n        summary_prompt += \"Each point should be a string in the array. \"\n        summary_prompt += \"Do not include any explanatory text, just the JSON object.\"\n    \n    # Prepare the API request payload\n    payload = {\n        \"messages\": [{\"role\": \"user\", \"content\": summary_prompt}],\n        \"temperature\": temperature,\n        \"model\": model,\n        \"max_tokens\": max_tokens,\n        \"response_format\": {\n            \"type\": \"json_object\",\n        }\n    }\n    \n    headers = {\n        \"Authorization\": f\"Bearer {api_key}\",\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n    }\n    \n    try:\n        # Make the API request\n        response = requests.post(api_url, headers=headers, json=payload)\n        response.raise_for_status()\n        \n        # Extract the response content\n        response_data = response.json()\n        content = response_data[\"choices\"][0][\"message\"][\"content\"]\n        # print(content)\n        \n        # Extract the summary from the response\n        try:\n            # Try to parse the content as JSON directly\n            summary_data = json.loads(content)\n            \n            if format.lower() == \"paragraph\":\n                # Get the paragraph summary\n                if isinstance(summary_data, dict) and \"summary\" in summary_data:\n                    return [[summary_data[\"summary\"]]]\n                else:\n                    return [[\"Error: Unable to parse response. Expected a JSON object with 'summary' field.\"]]\n            else:  # bullets or key_points\n                # Get the bullet points or key points\n                if isinstance(summary_data, dict) and \"summary_points\" in summary_data:\n                    points = summary_data[\"summary_points\"]\n                    if isinstance(points, list):\n                        return [[point] for point in points]\n                    else:\n                        return [[\"Error: Unable to parse response. Expected an array of summary points.\"]]\n                else:\n                    return [[\"Error: Unable to parse response. Expected a JSON object with 'summary_points' field.\"]]\n                \n        except (json.JSONDecodeError, ValueError):\n            # If JSON parsing fails, return an error message\n            return [[\"Error: Unable to generate summary. The AI response wasn't in the expected format.\"]]\n             \n    except requests.exceptions.RequestException as e:\n        # Handle API request errors\n        return [[f\"Error: API request failed. {str(e)}\"]]",
    "excelExample": "=AI_SUMMARIZE(sample_text, \"short\", \"paragraph\")",
    "fileId": "7"
  },
  {
    "name": "ai_table",
    "description": "Uses AI to generate a structured table based on the prompt and optional header/source data.",
    "code": "import requests\nimport json\n\ndef ai_table(prompt, header=None, source=None, temperature=0.0, model='mistral-small-latest', max_tokens=1500):\n    \"\"\"\n    Uses AI to generate a structured table based on the prompt and optional header/source data.\n    \n    Args:\n        prompt (str): Instruction for AI to create a table\n        header (list, optional): 2D list containing table header (column names)\n        source (list, optional): 2D list containing source data used to create the table\n        temperature (float, optional): Controls response creativity (0-2). Default is 0\n        model (str, optional): ID of the model to use\n        max_tokens (int, optional): Maximum tokens for response generation. Default is 1500\n        \n    Returns:\n        list: 2D list representing the generated table data\n    \"\"\"\n    # Using Boardflare API for demo purposes. Replace with any OpenAI compatible API endpoint.\n    api_url = \"https://llm.boardflare.com\" # replace with \"https://api.mistral.ai/v1/chat/completions\"\n    api_key = \"cV4a59t1wjYGs....\" # replace with your Mistral API key\n    \n    # Construct a specific prompt for table generation\n    table_prompt = f\"Generate a well-organized table based on this request: {prompt}\"\n    \n    # Add header information if provided\n    if header is not None:\n        # Assuming header is a 2D list with a single row for column names\n        if header and len(header) > 0:\n            header_str = \", \".join(str(col) for col in header[0])\n            table_prompt += f\"\\nUse exactly these columns: {header_str}\"\n    \n    # Add source data information if provided\n    if source is not None:\n        source_str = json.dumps(source, indent=2)\n        table_prompt += f\"\\n\\nUse this source data to create the table:\\n{source_str}\"\n    \n    # Add instruction for structured output\n    table_prompt += \"\\nReturn ONLY a JSON array of arrays (2D array) with the table data. \"\n    table_prompt += \"The first row should contain column headers if not provided. \"\n    table_prompt += \"Each subsequent row should contain data that fits the columns. \"\n    table_prompt += \"Do not include any explanatory text, just the JSON array.\"\n    \n    # Prepare the API request payload\n    payload = {\n        \"messages\": [{\"role\": \"user\", \"content\": table_prompt}],\n        \"temperature\": temperature,\n        \"model\": model,\n        \"max_tokens\": max_tokens,\n        \"response_format\": {\n            \"type\": \"json_object\",\n        }\n    }\n    \n    headers = {\n        \"Authorization\": f\"Bearer {api_key}\",\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n    }\n    \n    try:\n        # Make the API request\n        response = requests.post(api_url, headers=headers, json=payload)\n        response.raise_for_status()\n        \n        # Extract the response content\n        response_data = response.json()\n        content = response_data[\"choices\"][0][\"message\"][\"content\"]\n        \n        # Extract the JSON array from the response\n        try:\n            # Try to parse the content as JSON directly\n            table_data = json.loads(content)\n            return table_data\n        except (json.JSONDecodeError, ValueError):\n            # If JSON parsing fails, return an error message as a single cell\n            return [[\"Error: Unable to generate table. The AI response wasn't in the expected format.\"]]\n             \n    except Exception as e:\n        # Handle any exception, including API request errors\n        return [[\"Error: API request failed.\", str(e)]]",
    "excelExample": null,
    "fileId": "8"
  },
  {
    "name": "text_distance",
    "description": "Calculate text similarity scores between needle(s) and haystack items.",
    "code": "import textdistance\n\ndef text_distance(needle, haystack, algorithm='jaccard', top_n=1):\n    \"\"\"Calculate text similarity scores between needle(s) and haystack items.\n    \n    Args:\n        needle: String or 2D list of strings to search for\n        haystack: 2D list of strings to search within\n        algorithm (str): Algorithm name from textdistance library (default: 'jaccard')\n        top_n (int): Number of top matches to return (default: 1).\n    \n    Returns:\n        list: 2D list where each inner list contains the top N matches as [position, score] pairs.\n    \"\"\"\n    # Get the algorithm function from textdistance\n    algo_func = getattr(textdistance, algorithm)\n    \n    # Handle needle as either string or 2D list\n    needle_flat = []\n    if isinstance(needle, str):\n        needle_flat = [needle] if needle.strip() else []\n    else:\n        # Flatten 2D lists and filter out None values\n        needle_flat = [item for sublist in needle for item in sublist if item is not None]\n    \n    # Flatten haystack 2D list\n    haystack_flat = [item for sublist in haystack for item in sublist if item is not None]\n    \n    if not haystack_flat:\n        return [[] for _ in needle_flat] # Return empty lists if haystack is empty\n        \n    results = []\n    for needle_item in needle_flat:\n        if not str(needle_item).strip():\n            results.append([])  # Handle empty needle values by returning an empty list for that needle\n            continue\n            \n        # Calculate similarity scores with normalization and round to 2 decimal places\n        # Adjust index to be 1-based\n        scores = [(index + 1, round(algo_func.normalized_similarity(str(needle_item), str(item)), 2)) \n                 for index, item in enumerate(haystack_flat)]\n        # Sort based on scores in descending order\n        scores.sort(key=lambda x: x[1], reverse=True)\n        # Get the top N matches (index and score)\n        top_matches = [list(score) for score in scores[:top_n]]\n        results.append(top_matches)\n\n    return results",
    "excelExample": "=TEXT_DISTANCE({\"apple\"}, {\"apple\";\"banana\";\"orange\";\"grape\"})",
    "fileId": "9"
  },
  {
    "name": "vader_sentiment",
    "description": "Analyzes sentiment of text using VADER.",
    "code": "import nltk\nfrom nltk.sentiment import SentimentIntensityAnalyzer\n\n# Ensure you have downloaded the necessary NLTK data\ntry:\n    nltk.data.find('sentiment/vader_lexicon.zip')\nexcept nltk.downloader.DownloadError:\n    nltk.download('vader_lexicon')\n\ndef vader_sentiment(text):\n    \"\"\"Analyzes sentiment of text using VADER.\n    Args:\n        text (str): Text to analyze\n    Returns:\n        float: Compound sentiment score (-1 to 1)\n    \"\"\"\n    if not isinstance(text, str):\n        return 0.0 # Return neutral for non-string input\n    sia = SentimentIntensityAnalyzer()\n    sentiment = sia.polarity_scores(text)\n    return round(sentiment['compound'], 4) # Round for consistency",
    "excelExample": "=VADER_SENTIMENT(\"I love this product!\")",
    "fileId": "10"
  },
  {
    "name": "web_content",
    "description": "Returns web page content in markdown format using Jina.  Useful as a starting point for extraction, summarization, etc.",
    "code": "import requests\n\ndef web_content(url):\n    \"\"\"\n    Returns web page content in markdown format using Jina.  Useful as a starting point for extraction, summarization, etc.\n\n    Args:\n        url (str): The full URL to fetch.\n\n    Returns:\n        str: The content of the response from the URL.\n    \"\"\"\n    headers = {\n        \"X-Retain-Images\": \"none\"\n    }\n    base_url = \"https://r.jina.ai/\"\n    full_url = base_url + url\n    response = requests.get(full_url, headers=headers)\n    response.raise_for_status()\n    # Extract content after 'Markdown Content:' marker\n    try:\n        content = response.text.split(\"Markdown Content:\")[1]\n    except IndexError:\n        # Handle cases where the marker might not be present\n        content = response.text \n    return content.strip() # Strip leading/trailing whitespace",
    "excelExample": "=WEB_CONTENT(\"https://www.ycombinator.com/companies/airbnb\")",
    "fileId": "11"
  }
]